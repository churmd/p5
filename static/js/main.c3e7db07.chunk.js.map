{"version":3,"sources":["NotFound.jsx","constants/Mod.js","sketches/raycastingfps/Player.js","sketches/raycastingfps/World.js","sketches/raycastingfps/PlayerRay.js","sketches/raycastingfps/ProjectionPlane.js","sketches/raycastingfps/RayCastingFps.jsx","App.js","index.js","constants/RoutePaths.js"],"names":["Notfound","mod","n","m","Player","p5Instance","x","y","heading","this","p","position","createVector","walkSpeed","turnSpeed","TWO_PI","dir","p5","Vector","fromAngle","mult","add","HALF_PI","amount","blockSize","pixelX","round","pixelY","pixelPos","getPixelXY","push","stroke","fill","translate","rotate","triangle","pop","propTypes","number","World","player","blocks","length","floor","playerRays","yOffset","xOffset","rect","show","forEach","playerRay","didCollide","headingVec","angle","vecToCollsion","distance","collsionPointInWorld","playerPosition","noStroke","circle","instanceOf","PlayerRay","playerHeading","distanceWithoutFishEye","cos","bool","ProjectionPlane","width","height","fov","distanceToPlane","tan","angleBetweenRays","collisions","world","rectMode","CENTER","i","__drawWallInColumn","collision","column","wallHeight","wallBrightness","map","wallColour","color","wrappedAngle","c","__distanceToWall","origin","sx","sqrt","sq","sy","mults","__getXYDirectionMultipliers","xMult","yMult","ax","__getXInitOffset","ay","__getYInitOffset","nextXCoord","nextYCoord","nextXDist","nextYDist","distToWall","min","maxRayLen","getWidth","getHeight","isCoordWall","RayCollision","PI","xCoord","yCoord","RayCastingFps","props","sketch","projectionPlane","setup","frameRate","angleMode","RADIANS","radians","cnv","createCanvas","style","parent","draw","handleMovement","findRayCollisions","background","showProjection","keyIsDown","LEFT_ARROW","turnLeft","RIGHT_ARROW","turnRight","moveForward","moveLeft","moveBackward","moveRight","windowResized","resizeCanvas","window","innerWidth","innerHeight","myRef","React","createRef","myP5","current","ref","id","Component","ModuloTimesTable","lazy","SnowflakeGenerator","FlockingSimulation","LissajousCurveTable","MatrixRain","MaurerRose","MazeGenerator","ChaosGame","Home","BeautifulTrig","Hexes","Cuneiform","routing","fallback","exact","path","routePaths","component","App","StrictMode","rootElement","document","getElementById","hasChildNodes","hydrate","render","home","chaosGame","cuneiformNumberConverter","beautifulTrig","flockingSimulation","hexes","lissajousCurveTable","matrixRain","maurerRose","mazeGenerator","moduloTimesTable","rayCastingFps","snowflakeGenerator"],"mappings":"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","file":"static/js/main.c3e7db07.chunk.js","sourcesContent":["import React from \"react\";\nconst Notfound = () => <h1>Not found my app</h1>;\nexport default Notfound;\n","export const mod = (n, m) => {\n    return ((n % m) + m) % m;\n};\n","import p5 from \"p5\";\nimport { number } from \"prop-types\";\nimport { mod } from \"../../constants/Mod\";\n\nclass Player {\n    constructor(p5Instance, x, y, heading) {\n        this.p = p5Instance;\n        this.position = this.p.createVector(x, y);\n        this.heading = heading;\n        this.walkSpeed = 0.05;\n        this.turnSpeed = 0.075;\n    }\n\n    turnRight() {\n        this.heading -= this.turnSpeed;\n        this.heading = mod(this.heading, this.p.TWO_PI);\n    }\n\n    turnLeft() {\n        this.heading += this.turnSpeed;\n        this.heading = mod(this.heading, this.p.TWO_PI);\n    }\n\n    moveForward() {\n        let dir = p5.Vector.fromAngle(-this.heading);\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveBackward() {\n        let dir = p5.Vector.fromAngle(-this.heading);\n        dir.mult(-this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveLeft() {\n        let dir = p5.Vector.fromAngle(-(this.heading + this.p.HALF_PI));\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveRight(amount) {\n        let dir = p5.Vector.fromAngle(-(this.heading - this.p.HALF_PI));\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    getPixelXY(blockSize) {\n        const pixelX = this.p.round(this.position.x * blockSize);\n        const pixelY = this.p.round(this.position.y * blockSize);\n        return this.p.createVector(pixelX, pixelY);\n    }\n\n    show(blockSize) {\n        const pixelPos = this.getPixelXY(blockSize);\n\n        this.p.push();\n\n        this.p.stroke(0);\n        this.p.fill(255);\n        this.p.translate(pixelPos.x, pixelPos.y);\n        this.p.rotate(-(this.heading - this.p.HALF_PI));\n\n        this.p.triangle(-10, 10, 0, -10, 10, 10);\n\n        this.p.pop();\n    }\n}\n\nPlayer.propTypes = {\n    p5Instance: p5,\n    x: number,\n    y: number,\n    heading: number,\n};\n\nexport default Player;\n","import p5 from \"p5\";\nimport { instanceOf } from \"prop-types\";\nimport Player from \"./Player\";\n\nclass World {\n    constructor(p5Instance, player) {\n        this.p = p5Instance;\n        this.player = player;\n        this.blockSize = 64;\n        this.blocks = [\n            [1, 1, 1, 1, 1, 1, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 0, 0, 0, 1, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 1, 0, 0, 0, 1],\n            [1, 1, 1, 1, 1, 1, 1],\n        ];\n    }\n\n    getWidth() {\n        return this.blocks[0].length * this.blockSize;\n    }\n\n    getHeight() {\n        return this.blocks.length * this.blockSize;\n    }\n\n    isCoordWall(x, y) {\n        x = this.p.floor(x);\n        y = this.p.floor(y);\n\n        if (\n            x < this.blocks[0].length &&\n            x >= 0 &&\n            y < this.blocks.length &&\n            y >= 0\n        ) {\n            return this.blocks[y][x] === 1;\n        }\n\n        return false;\n    }\n\n    show(playerRays) {\n        this.p.push();\n\n        for (let y = 0; y < this.blocks.length; y++) {\n            for (let x = 0; x < this.blocks[0].length; x++) {\n                const yOffset = y * this.blockSize;\n                const xOffset = x * this.blockSize;\n\n                if (this.blocks[y][x] === 0) {\n                    this.p.fill(150);\n                } else {\n                    this.p.fill(51, 204, 255);\n                }\n\n                this.p.rect(xOffset, yOffset, this.blockSize, this.blockSize);\n            }\n        }\n\n        this.player.show(this.blockSize);\n\n        playerRays.forEach((playerRay) => {\n            if (playerRay.didCollide) {\n                const headingVec = p5.Vector.fromAngle(-playerRay.angle);\n                const vecToCollsion = p5.Vector.mult(\n                    headingVec,\n                    playerRay.distance\n                );\n                const collsionPointInGrid = p5.Vector.add(\n                    playerRay.playerPosition,\n                    vecToCollsion\n                );\n                const collsionPointInWorld = collsionPointInGrid.mult(\n                    this.blockSize\n                );\n\n                this.p.fill(0, 51, 204);\n                this.p.noStroke();\n                this.p.circle(\n                    collsionPointInWorld.x,\n                    collsionPointInWorld.y,\n                    10\n                );\n            }\n        });\n\n        this.p.pop();\n    }\n}\n\nWorld.propTypes = {\n    p5Instance: instanceOf(p5),\n    player: instanceOf(Player),\n};\n\nexport default World;\n","import { cos } from \"mathjs\";\nimport p5 from \"p5\";\nimport { bool, number, instanceOf } from \"prop-types\";\n\nclass PlayerRay {\n    constructor(\n        didCollide = false,\n        playerPosition = null,\n        playerHeading = null,\n        angle = null,\n        distance = null\n    ) {\n        this.didCollide = didCollide;\n        this.playerPosition = playerPosition;\n        this.angle = angle;\n        this.distance = distance;\n        this.distanceWithoutFishEye = distance * cos(playerHeading - angle);\n    }\n}\n\nPlayerRay.propTypes = {\n    didCollide: bool,\n    playerPosition: instanceOf(p5.Vector),\n    playerHeading: instanceOf(p5.Vector),\n    distance: number,\n};\n\nexport default PlayerRay;\n","import p5 from \"p5\";\nimport { number, instanceOf } from \"prop-types\";\nimport { mod } from \"../../constants/Mod\";\nimport Player from \"./Player\";\nimport RayCollision from \"./PlayerRay\";\n\nclass ProjectionPlane {\n    constructor(p5Instance, width, height, fov) {\n        this.p = p5Instance;\n        this.width = width;\n        this.height = height;\n        this.distanceToPlane = width / 2 / this.p.tan(fov / 2);\n        this.fov = fov;\n        this.angleBetweenRays = fov / width;\n    }\n\n    showProjection(collisions, world) {\n        this.p.push();\n        this.p.noStroke();\n\n        // draw sky\n        this.p.fill(204, 255, 255);\n        this.p.rect(0, 0, this.width, this.height / 2);\n\n        // draw floor\n        this.p.fill(150);\n        this.p.rect(0, this.height / 2, this.width, this.height / 2);\n\n        this.p.rectMode(this.p.CENTER);\n        for (let i = 0; i < collisions.length; i++) {\n            this.__drawWallInColumn(collisions[i], world.blockSize, i);\n        }\n\n        this.p.pop();\n    }\n\n    /**\n     *\n     * @param {RayCollision} collision\n     * @param {number} blockSize\n     * @param {number} column\n     */\n    __drawWallInColumn(collision, blockSize, column) {\n        if (collision.didCollide) {\n            this.p.push();\n\n            const distInWorldToWall = this.p.round(\n                collision.distanceWithoutFishEye * blockSize\n            );\n            const wallHeight =\n                (blockSize / distInWorldToWall) * this.distanceToPlane;\n\n            const maxViewDist = 6;\n            const wallBrightness = this.p.map(\n                collision.distanceWithoutFishEye,\n                0,\n                maxViewDist,\n                100,\n                0,\n                true\n            );\n            const wallColour = this.p.color(\n                `hsb(195, 100%, ${wallBrightness}%)`\n            );\n\n            // if there is no stroke the walls look tranparent as they are only 1 pixel wide\n            this.p.stroke(wallColour);\n            this.p.fill(wallColour);\n            this.p.rect(column, this.height / 2, 1, wallHeight);\n\n            this.p.pop();\n        }\n    }\n\n    /**\n     * Finds all the ray colisions from the player.\n     * @param {Player} player The player casting the rays.\n     * @param {World} world The world the rays will be cast into.\n     * @returns {RayCollision[]} The list of ray colisions with walls found.\n     */\n    findRayCollisions(player, world) {\n        let angle = player.heading + this.fov / 2;\n        const collisions = [];\n        for (let i = 0; i < this.width; i++) {\n            const wrappedAngle = mod(angle, this.p.TWO_PI);\n\n            let c = this.__distanceToWall(player, wrappedAngle, world);\n            collisions.push(c);\n\n            angle -= this.angleBetweenRays;\n        }\n\n        return collisions;\n    }\n\n    /**\n     *\n     * @param {Player} player\n     * @param {number} angle\n     * @param {World} world\n     * @returns {RayCollision}\n     */\n    __distanceToWall(player, angle, world) {\n        const origin = player.position;\n\n        // used to calculate length of line along a heading given only 1 coord\n        const headingVec = p5.Vector.fromAngle(angle, 1);\n\n        const sx = this.p.sqrt(1 + this.p.sq(headingVec.y / headingVec.x));\n        const sy = this.p.sqrt(1 + this.p.sq(headingVec.x / headingVec.y));\n\n        // x y directions of travel\n        const mults = this.__getXYDirectionMultipliers(angle);\n        const xMult = mults.x;\n        const yMult = mults.y;\n\n        // Get inital distances to first grid line in x and y\n        const ax = this.__getXInitOffset(origin.x, xMult);\n        const ay = this.__getYInitOffset(origin.y, yMult);\n\n        let nextXCoord = origin.x;\n        let nextYCoord = origin.y;\n\n        let nextXDist = ax * sx;\n        let nextYDist = ay * sy;\n\n        let distToWall = this.p.min(nextXDist, nextYDist);\n\n        const maxRayLen = this.p.sqrt(\n            this.p.sq(world.getWidth()) + this.p.sq(world.getHeight())\n        );\n\n        while (this.p.min(nextXDist, nextYDist) <= maxRayLen) {\n            if (world.isCoordWall(nextXCoord, nextYCoord)) {\n                return new RayCollision(\n                    true,\n                    origin,\n                    player.heading,\n                    angle,\n                    distToWall\n                );\n            }\n\n            if (nextXDist < nextYDist) {\n                nextXCoord += xMult;\n                distToWall = nextXDist;\n                nextXDist += sx;\n            } else {\n                nextYCoord += yMult;\n                distToWall = nextYDist;\n                nextYDist += sy;\n            }\n        }\n\n        return new RayCollision();\n    }\n\n    /**\n     * Multipliers to move along an angle in the correct x y direction.\n     * @param {number} angle\n     * @returns {x: number, y: number} (x,y) direction multipliers\n     */\n    __getXYDirectionMultipliers(angle) {\n        let mults = { x: 1, y: 1 };\n\n        if (angle < this.p.PI) {\n            mults.y = -1;\n        }\n\n        if (angle >= this.p.HALF_PI && angle < this.p.PI + this.p.HALF_PI) {\n            mults.x = -1;\n        }\n\n        return mults;\n    }\n\n    __getXInitOffset(xCoord, xMult) {\n        if (xMult === -1) {\n            return xCoord % 1;\n        } else {\n            return 1 - (xCoord % 1);\n        }\n    }\n\n    __getYInitOffset(yCoord, yMult) {\n        if (yMult === -1) {\n            return yCoord % 1;\n        } else {\n            return 1 - (yCoord % 1);\n        }\n    }\n}\n\nProjectionPlane.propTypes = {\n    p5Instance: instanceOf(p5),\n    width: number,\n    height: number,\n    fov: number,\n};\n\nexport default ProjectionPlane;\n","import React from \"react\";\nimport p5 from \"p5\";\nimport Player from \"./Player\";\nimport World from \"./World\";\nimport ProjectionPlane from \"./ProjectionPlane\";\n\nconst KeyCodeW = 87;\nconst KeyCodeA = 65;\nconst KeyCodeS = 83;\nconst KeyCodeD = 68;\n\n// Note p5 rotate functions go in a clockwise motion,\n// normal rotate function go in counter clockwise\n// so times all angles by -1 when drawing\n\nclass RayCastingFps extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let world;\n        let player;\n        let projectionPlane;\n\n        p.setup = () => {\n            p.frameRate(30);\n\n            p.angleMode(p.RADIANS);\n\n            player = new Player(p, 1.5, 1.5, 0);\n            world = new World(p, player);\n            projectionPlane = new ProjectionPlane(\n                p,\n                world.getWidth(),\n                world.getHeight(),\n                p.radians(60)\n            );\n\n            const cnv = p.createCanvas(world.getWidth() * 2, world.getHeight());\n            cnv.style(\"display\", \"block\");\n            cnv.parent(\"canvas\");\n        };\n\n        p.draw = () => {\n            handleMovement(player);\n            const collisions = projectionPlane.findRayCollisions(player, world);\n\n            p.background(0);\n            world.show(collisions);\n\n            p.translate(world.getWidth(), 0);\n            projectionPlane.showProjection(collisions, world);\n        };\n\n        const handleMovement = (player) => {\n            if (p.keyIsDown(p.LEFT_ARROW)) {\n                player.turnLeft();\n            } else if (p.keyIsDown(p.RIGHT_ARROW)) {\n                player.turnRight();\n            }\n\n            if (p.keyIsDown(KeyCodeW)) {\n                player.moveForward();\n            }\n            if (p.keyIsDown(KeyCodeA)) {\n                player.moveLeft();\n            }\n            if (p.keyIsDown(KeyCodeS)) {\n                player.moveBackward();\n            }\n            if (p.keyIsDown(KeyCodeD)) {\n                player.moveRight();\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(window.innerWidth, window.innerHeight);\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <div id='canvas' />\n                <p>Controls:</p>\n                <ul>\n                    <li>move with w, a, s, d</li>\n                    <li>turn with left and right arrow keys</li>\n                </ul>\n            </div>\n        );\n    }\n}\nexport default RayCastingFps;\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\nimport * as routePaths from \"./constants/RoutePaths\";\nimport Notfound from \"./NotFound\";\nimport RayCastingFps from \"./sketches/raycastingfps/RayCastingFps\";\n\nconst ModuloTimesTable = lazy(() =>\n    import(\"./sketches/moduloTimesTableCircle/ModuloTimesTable\")\n);\nconst SnowflakeGenerator = lazy(() =>\n    import(\"./sketches/snowfalkeGenerator/SnowflakeGenerator\")\n);\nconst FlockingSimulation = lazy(() =>\n    import(\"./sketches/flockingSimulation/FlockingSimulation\")\n);\nconst LissajousCurveTable = lazy(() =>\n    import(\"./sketches/lissajousCurveTable/LissajousCurveTable\")\n);\nconst MatrixRain = lazy(() => import(\"./sketches/matrixRain/MatrixRain\"));\nconst MaurerRose = lazy(() => import(\"./sketches/maurerRose/MaurerRose\"));\nconst MazeGenerator = lazy(() =>\n    import(\"./sketches/mazeGenerator/MazeGenerator\")\n);\nconst ChaosGame = lazy(() => import(\"./sketches/chaosGame/ChaosGame\"));\nconst Home = lazy(() => import(\"./components/home/Home\"));\nconst BeautifulTrig = lazy(() =>\n    import(\"./sketches/beautifulTrig/BeautifulTrig\")\n);\nconst Hexes = lazy(() => import(\"./sketches/hexes/Hexes\"));\nconst Cuneiform = lazy(() =>\n    import(\"./sketches/cuneiformNumConverter/Cuneiform\")\n);\n\nconst routing = (\n    <Router>\n        <Suspense fallback={<div>Page is Loading...</div>}>\n            <Switch>\n                <Route exact path={routePaths.home} component={Home} />\n                <Route\n                    exact\n                    path={routePaths.rayCastingFps}\n                    component={RayCastingFps}\n                />\n                <Route\n                    exact\n                    path={routePaths.cuneiformNumberConverter}\n                    component={Cuneiform}\n                />\n                <Route\n                    exact\n                    path={routePaths.moduloTimesTable}\n                    component={ModuloTimesTable}\n                />\n                <Route\n                    exact\n                    path={routePaths.snowflakeGenerator}\n                    component={SnowflakeGenerator}\n                />\n                <Route\n                    exact\n                    path={routePaths.flockingSimulation}\n                    component={FlockingSimulation}\n                />\n                <Route\n                    exact\n                    path={routePaths.lissajousCurveTable}\n                    component={LissajousCurveTable}\n                />\n                <Route\n                    exact\n                    path={routePaths.matrixRain}\n                    component={MatrixRain}\n                />\n                <Route\n                    exact\n                    path={routePaths.maurerRose}\n                    component={MaurerRose}\n                />\n                <Route\n                    exact\n                    path={routePaths.mazeGenerator}\n                    component={MazeGenerator}\n                />\n                <Route\n                    exact\n                    path={routePaths.chaosGame}\n                    component={ChaosGame}\n                />\n                <Route\n                    exact\n                    path={routePaths.beautifulTrig}\n                    component={BeautifulTrig}\n                />\n                <Route exact path={routePaths.hexes} component={Hexes} />\n                <Route component={Notfound} />\n            </Switch>\n        </Suspense>\n    </Router>\n);\n\nfunction App() {\n    return <React.StrictMode>{routing}</React.StrictMode>;\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { hydrate, render } from \"react-dom\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n\thydrate(<App />, rootElement);\n} else {\n\trender(<App />, rootElement);\n}\n","export const home = \"/\";\n\nexport const chaosGame = \"/chaosGame\";\nexport const cuneiformNumberConverter = \"/cuneiformNumberConverter\";\nexport const beautifulTrig = \"/beautifulTrigonometry\";\nexport const flockingSimulation = \"/flockingSimulation\";\nexport const hexes = \"/hexes\";\nexport const lissajousCurveTable = \"/lissajousCurveTable\";\nexport const matrixRain = \"/matrixRain\";\nexport const maurerRose = \"/maurerRose\";\nexport const mazeGenerator = \"/mazeGenerator\";\nexport const moduloTimesTable = \"/moduloTimesTable\";\nexport const rayCastingFps = \"/RayCastingFps\";\nexport const snowflakeGenerator = \"/snowflakeGenerator\";\n"],"sourceRoot":""}