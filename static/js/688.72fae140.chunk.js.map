{"version":3,"file":"static/js/688.72fae140.chunk.js","mappings":"6KAGA,MAAMA,UAA2BC,EAAAA,UAC7BC,WAAAA,CAAYC,GACRC,MAAMD,GAAO,KAIjBE,OAAUC,IACN,MACMC,EAAc,EAEpB,IAAIC,EACAC,EACAC,EA8CJ,SAASC,IACLL,EAAEM,WAAW,IACbJ,EAAkB,GAClBC,EAAc,KACdC,EAAuB,CAC3B,CAEA,SAASG,EAAUC,GACfR,EAAES,QAAQD,EAAME,EAAGF,EAAMG,EAAiB,EAAdV,EAA+B,EAAdA,EACjD,CA8BA,SAASW,EAAeJ,GACpB,IAAK,IAAIK,EAAI,EAAGA,EAAIX,EAAgBY,OAAQD,IAAK,CAC7C,MAAME,EAAgBb,EAAgBW,GAOtC,GANwBb,EAAEgB,KACtBD,EAAcL,EACdK,EAAcJ,EACdH,EAAME,EACNF,EAAMG,IAE2B,EAAdV,EACnB,OAAO,CAEf,CACA,OAAO,CACX,CAGA,SAASgB,EAAgBT,EAAOU,GAC5BV,EAAME,GAAK,EACXF,EAAMG,GAAKX,EAAEmB,QAAQ,EAAG,GAExB,IAAIC,EAAQZ,EAAMa,UAClBD,EAAQpB,EAAEsB,UAAUF,EAAO,EAAGF,GAE9B,MAAMK,EAAYf,EAAMgB,MAClBC,EAASC,IAAAA,OAAUC,UAAUP,GACnCK,EAAOG,OAAOL,GAEdf,EAAME,EAAIe,EAAOf,EACjBF,EAAMG,EAAIc,EAAOd,CACrB,CAjHAX,EAAE6B,MAAQ,KACI7B,EAAE8B,aAAa9B,EAAE+B,YAAa/B,EAAEgC,cACtCC,MAAM,UAAW,SACrBjC,EAAEkC,UAAU,IACZ7B,GAAgB,EAGpBL,EAAEmC,KAAO,KACL,MAAMC,EAb6B,EAc/BpC,EAAEqC,eACFjC,EAAuBgC,GACvB/B,IAIJ,IA0CJ,WACI,MAAMiC,EAAgBC,KAAKC,IACvBxC,EAAE+B,YAAc,EAChB/B,EAAEgC,aAAe,GAEfxB,EAAQR,EAAEyC,aAAaH,EAAe,GAC5C,IAAII,EAAU,EAEd,KACIzB,EAAgBT,EAAOR,EAAE2C,OAAM,MAC3BnC,EAAME,EAAI,GAAKE,EAAeJ,KAGlCkC,IAGJ,OAAIA,EAAU,IACVxC,EAAgB0C,KAAKpC,GACrBL,EAAcK,GACP,EAIf,CAlEuBqC,GAGf,YADAzC,IAMJJ,EAAE8C,UAAU9C,EAAE+B,YAAc,EAAG/B,EAAEgC,aAAe,GAChDhC,EAAE+C,OAAO/C,EAAE2C,OAAM,IAEjB,MAAMK,EAAiBhD,EAAE2C,OAhCT,EAiChB,IAAK,IAAI9B,EAAI,EAAGA,EAjCA,EAiCiBA,IAC7Bb,EAAE+C,OAAOC,GAETzC,EAAUJ,GAEVH,EAAE4C,OACF5C,EAAEiD,MAAM,GAAI,GACZ1C,EAAUJ,GACVH,EAAEkD,KACN,EAGJlD,EAAEmD,cAAgB,KACdnD,EAAEoD,aAAapD,EAAE+B,YAAa/B,EAAEgC,cAChC3B,GAAgB,CAyEpB,EA5HAgD,KAAKC,MAAQ3D,EAAAA,WACjB,CA8HA4D,iBAAAA,GACIF,KAAKG,KAAO,IAAI9B,IAAJ,CAAO2B,KAAKtD,OAAQsD,KAAKC,MAAMG,QAC/C,CAEAC,oBAAAA,GACIC,SAASC,qBAAqB,UAAU,GAAGC,QAC/C,CAEAC,MAAAA,GACI,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,IAAKX,KAAKC,OAC1B,EAEJ,S","sources":["sketches/snowfalkeGenerator/SnowflakeGenerator.jsx"],"sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\n\nclass SnowflakeGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        const numBranches = 6;\n        const pointRadius = 3;\n        const secondsToKeepFinishedSnowflake = 3;\n        let snowflakeBranch;\n        let newestPoint;\n        let sameSnowflakeCounter;\n\n        p.setup = () => {\n            var cnv = p.createCanvas(p.windowWidth, p.windowHeight);\n            cnv.style(\"display\", \"block\");\n            p.frameRate(10);\n            clearSnowflake();\n        };\n\n        p.draw = () => {\n            const countBeforeClearing =\n                p.getFrameRate() * secondsToKeepFinishedSnowflake;\n            if (sameSnowflakeCounter > countBeforeClearing) {\n                clearSnowflake();\n            }\n\n            const pointAdded = addNextPoint();\n            if (!pointAdded) {\n                sameSnowflakeCounter++;\n                return;\n            }\n\n            // Center drawing on screen\n            // rotate so top and bottom snowflake branches are vertically aligned\n            p.translate(p.windowWidth / 2, p.windowHeight / 2);\n            p.rotate(p.TWO_PI / (numBranches * 2));\n\n            const rotationAmount = p.TWO_PI / numBranches;\n            for (let i = 0; i < numBranches; i++) {\n                p.rotate(rotationAmount);\n\n                showPoint(newestPoint);\n\n                p.push();\n                p.scale(1, -1);\n                showPoint(newestPoint);\n                p.pop();\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(p.windowWidth, p.windowHeight);\n            clearSnowflake();\n        };\n\n        // Clears the screen and resets the snowflake branch to be empty.\n        function clearSnowflake() {\n            p.background(51);\n            snowflakeBranch = [];\n            newestPoint = null;\n            sameSnowflakeCounter = 0;\n        }\n\n        function showPoint(point) {\n            p.ellipse(point.x, point.y, pointRadius * 2, pointRadius * 2);\n        }\n\n        // Add another point to the snowflake branch, if there is space on screen.\n        // Returns true if a new point was added the the branch, false if not.\n        function addNextPoint() {\n            const minWindowSize = Math.min(\n                p.windowWidth / 2,\n                p.windowHeight / 2\n            );\n            const point = p.createVector(minWindowSize, 0);\n            let counter = 0;\n\n            while (true) {\n                randomWalkPoint(point, p.TWO_PI / (numBranches * 2));\n                if (point.x < 1 || isIntersecting(point)) {\n                    break;\n                }\n                counter++;\n            }\n\n            if (counter > 0) {\n                snowflakeBranch.push(point);\n                newestPoint = point;\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        // Check if a point is intersecting with any of the existing points in the snowflake branch\n        function isIntersecting(point) {\n            for (let i = 0; i < snowflakeBranch.length; i++) {\n                const existingPoint = snowflakeBranch[i];\n                const distanceBetween = p.dist(\n                    existingPoint.x,\n                    existingPoint.y,\n                    point.x,\n                    point.y\n                );\n                if (distanceBetween <= pointRadius * 2) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        // Walk the point to the left keeping it within the angle specified from the origin\n        function randomWalkPoint(point, angleThreshold) {\n            point.x -= 1;\n            point.y += p.random(-3, 3);\n\n            let angle = point.heading();\n            angle = p.constrain(angle, 0, angleThreshold);\n\n            const magnitude = point.mag();\n            const point2 = p5.Vector.fromAngle(angle);\n            point2.setMag(magnitude);\n\n            point.x = point2.x;\n            point.y = point2.y;\n        }\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementsByTagName(\"canvas\")[0].remove();\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\nexport default SnowflakeGenerator;\n"],"names":["SnowflakeGenerator","React","constructor","props","super","sketch","p","pointRadius","snowflakeBranch","newestPoint","sameSnowflakeCounter","clearSnowflake","background","showPoint","point","ellipse","x","y","isIntersecting","i","length","existingPoint","dist","randomWalkPoint","angleThreshold","random","angle","heading","constrain","magnitude","mag","point2","p5","fromAngle","setMag","setup","createCanvas","windowWidth","windowHeight","style","frameRate","draw","countBeforeClearing","getFrameRate","minWindowSize","Math","min","createVector","counter","TWO_PI","push","addNextPoint","translate","rotate","rotationAmount","scale","pop","windowResized","resizeCanvas","this","myRef","componentDidMount","myP5","current","componentWillUnmount","document","getElementsByTagName","remove","render","_jsx","ref"],"sourceRoot":""}