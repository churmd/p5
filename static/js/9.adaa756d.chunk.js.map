{"version":3,"sources":["sketches/beautifulTrig/BeautifulTrig.jsx"],"names":["BeautifulTrig","props","sketch","p","angle","numLines","showTrigEnabled","setup","createCanvas","getCanvasWidth","getCanvasHeight","style","createControls","showTrigButton","createButton","parent","mousePressed","html","redraw","draw","background","width","height","circleDiameter","Math","min","circleRadius","translate","showLines","showOuterCircleLine","showTrigLines","showPoints","showOuterCirclePoint","updateState","roatationStep","PI","i","push","rotate","stroke","strokeWeight","line","pop","noFill","ellipse","colorMode","HSL","sinColour","color","cosColour","sinArcDiameter","arc","cosArcDiameter","HALF_PI","xPosOnCircle","cos","yPosOnCircle","sin","cosPosition","sinePosition","pointOffset","pointSize","pointAngle","hue","colour","fill","xPos","yPos","TWO_PI","windowResized","resizeCanvas","window","innerHeight","innerWidth","myRef","React","createRef","this","myP5","p5","current","className","ref","id","Component"],"mappings":"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","file":"static/js/9.adaa756d.chunk.js","sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\nimport \"./BeautifulTrig.scss\";\n\nclass BeautifulTrig extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let angle = 0;\n        let numLines = 1;\n        let showTrigEnabled = false;\n        const rotationSpeed = 0.01;\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n        };\n\n        const createControls = () => {\n            const showTrigButton = p.createButton(\"Show Trigonometry\");\n            showTrigButton.parent(\"controls\");\n\n            showTrigButton.mousePressed(() => {\n                showTrigEnabled = !showTrigEnabled;\n                if (showTrigEnabled) {\n                    showTrigButton.html(\"Hide Trigonometry\");\n                    numLines = 2;\n                } else {\n                    showTrigButton.html(\"Show Trigonometry\");\n                    p.redraw();\n                }\n            });\n        };\n\n        p.draw = () => {\n            p.background(200);\n\n            const width = getCanvasWidth();\n            const height = getCanvasHeight();\n            const circleDiameter = Math.min(width, height) * 0.9;\n            const circleRadius = circleDiameter / 2;\n\n            p.translate(width / 2, height / 2);\n\n            showLines(circleRadius);\n            showOuterCircleLine(circleDiameter);\n            showTrigLines(circleRadius);\n            showPoints(circleRadius);\n            showOuterCirclePoint(circleRadius);\n\n            updateState();\n        };\n\n        const showLines = (circleRadius) => {\n            const roatationStep = p.PI / numLines;\n            for (let i = 0; i < numLines; i++) {\n                p.push();\n\n                p.rotate(i * roatationStep);\n                p.stroke(0);\n                p.strokeWeight(1);\n                p.line(-circleRadius, 0, circleRadius, 0);\n\n                p.pop();\n            }\n        };\n\n        const showOuterCircleLine = (circleDiameter) => {\n            p.push();\n\n            p.stroke(0);\n            p.strokeWeight(5);\n            p.noFill();\n            p.ellipse(0, 0, circleDiameter, circleDiameter);\n\n            p.pop();\n        };\n\n        const showTrigLines = (circleRadius) => {\n            if (!showTrigEnabled) {\n                return;\n            }\n            p.push();\n\n            p.colorMode(p.HSL, 360);\n            const sinColour = p.color(0, 200, 200);\n            const cosColour = p.color(180, 200, 200);\n\n            p.push();\n\n            p.noFill();\n            p.strokeWeight(5);\n\n            const sinArcDiameter = circleRadius * 0.9;\n            p.stroke(sinColour);\n            p.arc(0, 0, sinArcDiameter, sinArcDiameter, angle, 0);\n\n            const cosArcDiameter = circleRadius * 1.1;\n            p.stroke(cosColour);\n            p.arc(0, 0, cosArcDiameter, cosArcDiameter, angle, 0 + p.HALF_PI);\n\n            p.pop();\n\n            p.push();\n\n            const xPosOnCircle = p.cos(angle) * circleRadius;\n            const yPosOnCircle = p.sin(angle) * circleRadius;\n\n            const cosPosition = p.cos(angle) * circleRadius;\n            const sinePosition = p.sin(angle) * circleRadius;\n\n            p.stroke(0);\n            p.strokeWeight(2);\n            p.line(xPosOnCircle, yPosOnCircle, cosPosition, 0);\n            p.line(xPosOnCircle, yPosOnCircle, 0, sinePosition);\n            p.line(xPosOnCircle, yPosOnCircle, 0, 0);\n\n            p.pop();\n\n            // Need to consider where to place this on veritcal mobile phones\n\n            // const sinAngleDegrees = Math.abs(parseInt(p.degrees(angle)) % 360);\n            // const cosAngleDegrees = Math.abs(\n            //     parseInt(p.degrees(angle - p.HALF_PI)) % 360\n            // );\n\n            // p.textSize(30);\n            // p.textAlign(p.RIGHT);\n            // p.fill(sinColour);\n            // p.text(`Sin angle is ${sinAngleDegrees}`, getCanvasWidth() / 2, 0);\n            // p.fill(cosColour);\n            // p.text(`Cos angle is ${cosAngleDegrees}`, getCanvasWidth() / 2, 50);\n\n            p.pop();\n        };\n\n        const showPoints = (circleRadius) => {\n            const roatationStep = p.PI / numLines;\n            const pointOffset = -p.PI / numLines;\n            const pointSize = 0.05 * circleRadius;\n            for (let i = 0; i < numLines; i++) {\n                p.push();\n                p.rotate(i * roatationStep);\n\n                const pointAngle = angle + i * pointOffset;\n                const cosPosition = p.cos(pointAngle) * circleRadius;\n\n                p.colorMode(p.HSL, 360);\n                const hue = (360 / numLines) * i;\n                const colour = p.color(hue, 250, 200);\n\n                p.fill(colour);\n                p.stroke(0);\n                p.strokeWeight(2);\n\n                p.ellipse(cosPosition, 0, pointSize, pointSize);\n\n                p.pop();\n            }\n        };\n\n        const showOuterCirclePoint = (circleRadius) => {\n            const xPos = p.cos(angle) * circleRadius;\n            const yPos = p.sin(angle) * circleRadius;\n            const pointSize = 0.05 * circleRadius;\n\n            p.push();\n\n            p.stroke(0);\n            p.strokeWeight(2);\n            p.colorMode(p.HSL, 360);\n            const colour = p.color(0, 0, 360);\n            p.fill(colour);\n            p.ellipse(xPos, yPos, pointSize, pointSize);\n\n            p.pop();\n        };\n\n        const updateState = () => {\n            angle -= rotationSpeed;\n            if (angle < -p.TWO_PI) {\n                angle += p.TWO_PI;\n                if (!showTrigEnabled) {\n                    numLines += 1;\n                    if (numLines > 32) {\n                        numLines = 1;\n                    }\n                }\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n        };\n\n        const getCanvasHeight = () => {\n            return window.innerHeight * 0.95;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div className='beautiful-trig-sketch'>\n                <div ref={this.myRef}></div>\n                <div id='controls'></div>\n            </div>\n        );\n    }\n}\n\nexport default BeautifulTrig;\n"],"sourceRoot":""}