{"version":3,"file":"static/js/62.c999a6c3.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/get.js","sketches/hexes/Hex.js","sketches/hexes/HexGrid.js","sketches/hexes/CenterOutHexGrid.js","sketches/hexes/RandomHexGrid.js","sketches/hexes/Hexes.jsx"],"sourcesContent":["import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}","import p5 from \"p5\";\n\nexport default class Hex {\n    constructor(p, x, y, maxSideLength) {\n        this.p = p;\n        this.x = x;\n        this.y = y;\n        this.maxSideLength = maxSideLength;\n        this.sideLength = maxSideLength;\n        this.growing = false;\n        this.growthRate = 0;\n        this.fillColour = p.color(255, 255, 255);\n        this.outlineColour = p.color(0, 0, 0);\n    }\n\n    setSideLength(sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    grow() {\n        this.growing = true;\n    }\n\n    shrink() {\n        this.growing = false;\n    }\n\n    setColour(fillColour, outlineColour) {\n        this.fillColour = fillColour;\n        this.outlineColour = outlineColour;\n    }\n\n    update() {\n        this.growthRate = 0.1;\n        if (this.sideLength >= this.maxSideLength) {\n            this.growing = false;\n        }\n\n        if (this.sideLength <= 1) {\n            this.growing = true;\n        }\n\n        if (this.growing) {\n            this.sideLength += this.growthRate;\n            if (this.sideLength > this.maxSideLength) {\n                this.sideLength = this.maxSideLength;\n            }\n        } else {\n            this.sideLength -= this.growthRate;\n            if (this.sideLength < 1) {\n                this.sideLength = 1;\n            }\n        }\n    }\n\n    show() {\n        let pointA = p5.Vector.fromAngle(this.p.radians(-90), this.sideLength);\n        pointA.add(this.x, this.y);\n\n        let pointB = p5.Vector.fromAngle(this.p.radians(-30), this.sideLength);\n        pointB.add(this.x, this.y);\n\n        let pointC = p5.Vector.fromAngle(this.p.radians(30), this.sideLength);\n        pointC.add(this.x, this.y);\n\n        let pointD = p5.Vector.fromAngle(this.p.radians(90), this.sideLength);\n        pointD.add(this.x, this.y);\n\n        let pointE = p5.Vector.fromAngle(this.p.radians(150), this.sideLength);\n        pointE.add(this.x, this.y);\n\n        let pointF = p5.Vector.fromAngle(this.p.radians(210), this.sideLength);\n        pointF.add(this.x, this.y);\n\n        this.p.push();\n\n        this.p.fill(this.fillColour);\n        this.p.strokeWeight(1);\n        this.p.stroke(this.outlineColour);\n\n        this.p.beginShape();\n        this.p.vertex(pointA.x, pointA.y);\n        this.p.vertex(pointB.x, pointB.y);\n        this.p.vertex(pointC.x, pointC.y);\n        this.p.vertex(pointD.x, pointD.y);\n        this.p.vertex(pointE.x, pointE.y);\n        this.p.vertex(pointF.x, pointF.y);\n        this.p.endShape(this.p.CLOSE);\n\n        this.p.pop();\n    }\n}\n","import Hex from \"./Hex\";\n\n/**\n * Creates a tiled hex grid with a hex placed in the center of the screen.\n */\nexport default class HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        this.p = p;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.hexSideLength = hexSideLength;\n\n        const horizontalHexSpacing = p.sin(60) * hexSideLength * 2;\n        const verticleHexSpacing = 2 * hexSideLength * 0.75;\n\n        const midWidth = canvasWidth / 2;\n        const midHeight = canvasHeight / 2;\n\n        const maxHexXPos = midWidth + horizontalHexSpacing / 2;\n        const maxHexYPos = midHeight + verticleHexSpacing / 2;\n\n        this.hexes = this.__createHexes(\n            horizontalHexSpacing,\n            verticleHexSpacing,\n            maxHexXPos,\n            maxHexYPos\n        );\n    }\n\n    __createHexes(\n        horizontalHexSpacing,\n        verticleHexSpacing,\n        maxHexXPos,\n        maxHexYPos\n    ) {\n        let hexes = [];\n        let visited = [];\n        let explore = [];\n\n        explore.push({ x: 0, y: 0 });\n\n        while (explore.length > 0) {\n            let coord = explore.pop();\n\n            // Coordinates are floating points, so checking for equality is difficult\n            // and converting to int leads to rounding issues.\n            // So just check there is not a very close coordinate already visited.\n            const matchesThisCoord = (element) => {\n                let xDiff = Math.abs(element.x - coord.x);\n                let yDiff = Math.abs(element.y - coord.y);\n                return xDiff < 2 && yDiff < 2;\n            };\n\n            if (visited.some(matchesThisCoord)) {\n                continue;\n            }\n\n            if (\n                coord.x > maxHexXPos ||\n                coord.x < -maxHexXPos ||\n                coord.y > maxHexYPos ||\n                coord.y < -maxHexYPos\n            ) {\n                continue;\n            }\n\n            visited.push(coord);\n\n            let surroundingHexes = this.__getSurroundingHexes(\n                coord,\n                horizontalHexSpacing,\n                verticleHexSpacing\n            );\n            explore = explore.concat(surroundingHexes);\n        }\n\n        visited.forEach((coord) => {\n            let h = new Hex(this.p, coord.x, coord.y, this.hexSideLength);\n            hexes.push(h);\n        });\n\n        return hexes;\n    }\n\n    __getSurroundingHexes(coord, horizontalHexSpacing, verticleHexSpacing) {\n        let surroundingHexes = [];\n\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n\n        return surroundingHexes;\n    }\n\n    update() {\n        this.hexes.forEach((hex) => {\n            hex.update();\n        });\n    }\n\n    show() {\n        this.p.push();\n        this.p.translate(this.canvasWidth / 2, this.canvasHeight / 2);\n\n        this.hexes.forEach((hex) => {\n            hex.show();\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nconst timeBetweenColourChange = (60 / 255) * 1000;\n\nexport default class CenterOutHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.lastHueIncrementTime = Date.now();\n        this.setCenterOutPattern();\n    }\n\n    setCenterOutPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        const maxDistFromCenter = this.p.dist(\n            this.canvasWidth / 2,\n            this.canvasHeight / 2,\n            0,\n            0\n        );\n\n        this.hexes.forEach((hex) => {\n            const hexDistFromCenter = this.p.dist(hex.x, hex.y, 0, 0);\n            const startingSideLength = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                this.hexSideLength,\n                0\n            );\n            hex.setSideLength(startingSideLength);\n            hex.grow();\n\n            const hue = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                180,\n                50\n            );\n            const fillColour = this.p.color(0, 150, hue);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n\n    update() {\n        super.update();\n\n        const currentTime = Date.now();\n        if (currentTime - this.lastHueIncrementTime < timeBetweenColourChange) {\n            return;\n        }\n\n        this.lastHueIncrementTime = currentTime;\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const fillColour = this.p.color(\n                this.p.hue(hex.fillColour) + 1,\n                this.p.saturation(hex.fillColour),\n                this.p.lightness(hex.fillColour)\n            );\n            const outlineColour = this.p.color(\n                this.p.hue(hex.outlineColour) + 1,\n                this.p.saturation(hex.outlineColour),\n                this.p.lightness(hex.outlineColour)\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nexport default class RandomHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.setRandomPattern();\n    }\n\n    setRandomPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const maxColourVal = 256;\n            const hue = this.p.random(0, maxColourVal);\n            const sat = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const light = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const fillColour = this.p.color(hue, sat, light);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n\n            const startingSize = this.p.random(0, this.hexSideLength);\n            hex.setSideLength(startingSize);\n\n            const isGrowing = this.p.random([true, false]);\n            if (isGrowing) {\n                hex.grow();\n            } else {\n                hex.shrink();\n            }\n        });\n\n        this.p.pop();\n    }\n\n    __;\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport CenterOutHexGrid from \"./CenterOutHexGrid\";\nimport HexGrid from \"./HexGrid\";\nimport RandomHexGrid from \"./RandomHexGrid\";\nimport \"./Hexes.scss\";\nimport FullscreenElem from \"../../components/fullscreenElem/FullscreenElem\";\n\nclass Hexes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let hexGrid;\n        let currentPattern;\n        let patternRadioGroup;\n\n        const randomPattern = \"Random\";\n        const centerOutPattern = \"CenterOutPattern\";\n\n        const getCanvasHeight = () => {\n            return window.innerHeight;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n\n        const getSideLength = () => {\n            let minDim = Math.min(getCanvasHeight(), getCanvasWidth());\n            return 0.05 * minDim;\n        };\n\n        const createHexGrid = () => {\n            switch (currentPattern) {\n                case randomPattern:\n                    return new RandomHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                case centerOutPattern:\n                    return new CenterOutHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                default:\n                    return new HexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n            }\n        };\n\n        const createControls = () => {\n            patternRadioGroup = p.createRadio();\n            patternRadioGroup.option(randomPattern);\n            patternRadioGroup.option(centerOutPattern);\n            patternRadioGroup.parent(\"controls\");\n            patternRadioGroup.style(\"margin\", \"auto\");\n            patternRadioGroup.style(\"text-align\", \"center\");\n\n            patternRadioGroup.selected(randomPattern);\n\n            currentPattern = patternRadioGroup.value();\n        };\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n\n            p.angleMode(p.DEGREES);\n            hexGrid = createHexGrid();\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            if (patternRadioGroup.value() !== currentPattern) {\n                currentPattern = patternRadioGroup.value();\n                hexGrid = createHexGrid();\n            }\n\n            hexGrid.update();\n            hexGrid.show();\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n            hexGrid = createHexGrid();\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementById(\"canvas\").replaceChildren();\n        document.getElementById(\"controls\").replaceChildren();\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <FullscreenElem id='canvas' />\n                <div id='controls'></div>\n            </div>\n        );\n    }\n}\nexport default Hexes;\n"],"names":["_superPropBase","object","property","Object","prototype","hasOwnProperty","call","getPrototypeOf","_get","Reflect","get","target","receiver","base","desc","getOwnPropertyDescriptor","arguments","length","value","apply","this","Hex","p","x","y","maxSideLength","sideLength","growing","growthRate","fillColour","color","outlineColour","pointA","p5","radians","add","pointB","pointC","pointD","pointE","pointF","push","fill","strokeWeight","stroke","beginShape","vertex","endShape","CLOSE","pop","HexGrid","canvasWidth","canvasHeight","hexSideLength","horizontalHexSpacing","sin","verticleHexSpacing","maxHexXPos","maxHexYPos","hexes","__createHexes","visited","explore","coord","some","element","xDiff","Math","abs","yDiff","surroundingHexes","__getSurroundingHexes","concat","forEach","h","hex","update","translate","show","CenterOutHexGrid","lastHueIncrementTime","Date","now","setCenterOutPattern","colorMode","HSL","maxDistFromCenter","dist","hexDistFromCenter","startingSideLength","map","setSideLength","grow","hue","saturation","lightness","setColour","currentTime","RandomHexGrid","setRandomPattern","maxColourVal","random","sat","light","startingSize","shrink","Hexes","props","sketch","hexGrid","currentPattern","patternRadioGroup","randomPattern","centerOutPattern","getCanvasHeight","window","innerHeight","getCanvasWidth","innerWidth","getSideLength","min","createHexGrid","setup","cnv","createCanvas","parent","style","createRadio","option","selected","angleMode","DEGREES","draw","background","windowResized","resizeCanvas","myRef","React","myP5","current","document","getElementById","replaceChildren","ref","FullscreenElem","id"],"sourceRoot":""}