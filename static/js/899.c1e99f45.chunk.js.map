{"version":3,"file":"static/js/899.c1e99f45.chunk.js","mappings":"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","sources":["sketches/hexes/Hex.js","sketches/hexes/HexGrid.js","sketches/hexes/CenterOutHexGrid.js","sketches/hexes/RandomHexGrid.js","sketches/hexes/Hexes.jsx"],"sourcesContent":["import p5 from \"p5\";\n\nexport default class Hex {\n    constructor(p, x, y, maxSideLength) {\n        this.p = p;\n        this.x = x;\n        this.y = y;\n        this.maxSideLength = maxSideLength;\n        this.sideLength = maxSideLength;\n        this.growing = false;\n        this.growthRate = 0;\n        this.fillColour = p.color(255, 255, 255);\n        this.outlineColour = p.color(0, 0, 0);\n    }\n\n    setSideLength(sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    grow() {\n        this.growing = true;\n    }\n\n    shrink() {\n        this.growing = false;\n    }\n\n    setColour(fillColour, outlineColour) {\n        this.fillColour = fillColour;\n        this.outlineColour = outlineColour;\n    }\n\n    update() {\n        this.growthRate = 0.1;\n        if (this.sideLength >= this.maxSideLength) {\n            this.growing = false;\n        }\n\n        if (this.sideLength <= 1) {\n            this.growing = true;\n        }\n\n        if (this.growing) {\n            this.sideLength += this.growthRate;\n            if (this.sideLength > this.maxSideLength) {\n                this.sideLength = this.maxSideLength;\n            }\n        } else {\n            this.sideLength -= this.growthRate;\n            if (this.sideLength < 1) {\n                this.sideLength = 1;\n            }\n        }\n    }\n\n    show() {\n        let pointA = p5.Vector.fromAngle(this.p.radians(-90), this.sideLength);\n        pointA.add(this.x, this.y);\n\n        let pointB = p5.Vector.fromAngle(this.p.radians(-30), this.sideLength);\n        pointB.add(this.x, this.y);\n\n        let pointC = p5.Vector.fromAngle(this.p.radians(30), this.sideLength);\n        pointC.add(this.x, this.y);\n\n        let pointD = p5.Vector.fromAngle(this.p.radians(90), this.sideLength);\n        pointD.add(this.x, this.y);\n\n        let pointE = p5.Vector.fromAngle(this.p.radians(150), this.sideLength);\n        pointE.add(this.x, this.y);\n\n        let pointF = p5.Vector.fromAngle(this.p.radians(210), this.sideLength);\n        pointF.add(this.x, this.y);\n\n        this.p.push();\n\n        this.p.fill(this.fillColour);\n        this.p.strokeWeight(1);\n        this.p.stroke(this.outlineColour);\n\n        this.p.beginShape();\n        this.p.vertex(pointA.x, pointA.y);\n        this.p.vertex(pointB.x, pointB.y);\n        this.p.vertex(pointC.x, pointC.y);\n        this.p.vertex(pointD.x, pointD.y);\n        this.p.vertex(pointE.x, pointE.y);\n        this.p.vertex(pointF.x, pointF.y);\n        this.p.endShape(this.p.CLOSE);\n\n        this.p.pop();\n    }\n}\n","import Hex from \"./Hex\";\n\n/**\n * Creates a tiled hex grid with a hex placed in the center of the screen.\n */\nexport default class HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        this.p = p;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.hexSideLength = hexSideLength;\n\n        const horizontalHexSpacing = p.sin(60) * hexSideLength * 2;\n        const verticleHexSpacing = 2 * hexSideLength * 0.75;\n\n        const midWidth = canvasWidth / 2;\n        const midHeight = canvasHeight / 2;\n\n        const maxHexXPos = midWidth + horizontalHexSpacing / 2;\n        const maxHexYPos = midHeight + verticleHexSpacing / 2;\n\n        this.hexes = this.__createHexes(\n            horizontalHexSpacing,\n            verticleHexSpacing,\n            maxHexXPos,\n            maxHexYPos\n        );\n    }\n\n    __createHexes(\n        horizontalHexSpacing,\n        verticleHexSpacing,\n        maxHexXPos,\n        maxHexYPos\n    ) {\n        let hexes = [];\n        let visited = [];\n        let explore = [];\n\n        explore.push({ x: 0, y: 0 });\n\n        while (explore.length > 0) {\n            let coord = explore.pop();\n\n            // Coordinates are floating points, so checking for equality is difficult\n            // and converting to int leads to rounding issues.\n            // So just check there is not a very close coordinate already visited.\n            const matchesThisCoord = (element) => {\n                let xDiff = Math.abs(element.x - coord.x);\n                let yDiff = Math.abs(element.y - coord.y);\n                return xDiff < 2 && yDiff < 2;\n            };\n\n            if (visited.some(matchesThisCoord)) {\n                continue;\n            }\n\n            if (\n                coord.x > maxHexXPos ||\n                coord.x < -maxHexXPos ||\n                coord.y > maxHexYPos ||\n                coord.y < -maxHexYPos\n            ) {\n                continue;\n            }\n\n            visited.push(coord);\n\n            let surroundingHexes = this.__getSurroundingHexes(\n                coord,\n                horizontalHexSpacing,\n                verticleHexSpacing\n            );\n            explore = explore.concat(surroundingHexes);\n        }\n\n        visited.forEach((coord) => {\n            let h = new Hex(this.p, coord.x, coord.y, this.hexSideLength);\n            hexes.push(h);\n        });\n\n        return hexes;\n    }\n\n    __getSurroundingHexes(coord, horizontalHexSpacing, verticleHexSpacing) {\n        let surroundingHexes = [];\n\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n\n        return surroundingHexes;\n    }\n\n    update() {\n        this.hexes.forEach((hex) => {\n            hex.update();\n        });\n    }\n\n    show() {\n        this.p.push();\n        this.p.translate(this.canvasWidth / 2, this.canvasHeight / 2);\n\n        this.hexes.forEach((hex) => {\n            hex.show();\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nconst timeBetweenColourChange = (60 / 255) * 1000;\n\nexport default class CenterOutHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.lastHueIncrementTime = Date.now();\n        this.setCenterOutPattern();\n    }\n\n    setCenterOutPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        const maxDistFromCenter = this.p.dist(\n            this.canvasWidth / 2,\n            this.canvasHeight / 2,\n            0,\n            0\n        );\n\n        this.hexes.forEach((hex) => {\n            const hexDistFromCenter = this.p.dist(hex.x, hex.y, 0, 0);\n            const startingSideLength = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                this.hexSideLength,\n                0\n            );\n            hex.setSideLength(startingSideLength);\n            hex.grow();\n\n            const hue = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                180,\n                50\n            );\n            const fillColour = this.p.color(0, 150, hue);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n\n    update() {\n        super.update();\n\n        const currentTime = Date.now();\n        if (currentTime - this.lastHueIncrementTime < timeBetweenColourChange) {\n            return;\n        }\n\n        this.lastHueIncrementTime = currentTime;\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const fillColour = this.p.color(\n                this.p.hue(hex.fillColour) + 1,\n                this.p.saturation(hex.fillColour),\n                this.p.lightness(hex.fillColour)\n            );\n            const outlineColour = this.p.color(\n                this.p.hue(hex.outlineColour) + 1,\n                this.p.saturation(hex.outlineColour),\n                this.p.lightness(hex.outlineColour)\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nexport default class RandomHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.setRandomPattern();\n    }\n\n    setRandomPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const maxColourVal = 256;\n            const hue = this.p.random(0, maxColourVal);\n            const sat = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const light = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const fillColour = this.p.color(hue, sat, light);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n\n            const startingSize = this.p.random(0, this.hexSideLength);\n            hex.setSideLength(startingSize);\n\n            const isGrowing = this.p.random([true, false]);\n            if (isGrowing) {\n                hex.grow();\n            } else {\n                hex.shrink();\n            }\n        });\n\n        this.p.pop();\n    }\n\n    __;\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport CenterOutHexGrid from \"./CenterOutHexGrid\";\nimport HexGrid from \"./HexGrid\";\nimport RandomHexGrid from \"./RandomHexGrid\";\nimport \"./Hexes.scss\";\nimport FullscreenElem from \"../../components/fullscreenElem/FullscreenElem\";\n\nclass Hexes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let hexGrid;\n        let currentPattern;\n        let patternRadioGroup;\n\n        const randomPattern = \"Random\";\n        const centerOutPattern = \"CenterOutPattern\";\n\n        const getCanvasHeight = () => {\n            return window.innerHeight;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n\n        const getSideLength = () => {\n            let minDim = Math.min(getCanvasHeight(), getCanvasWidth());\n            return 0.05 * minDim;\n        };\n\n        const createHexGrid = () => {\n            switch (currentPattern) {\n                case randomPattern:\n                    return new RandomHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                case centerOutPattern:\n                    return new CenterOutHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                default:\n                    return new HexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n            }\n        };\n\n        const createControls = () => {\n            patternRadioGroup = p.createRadio();\n            patternRadioGroup.option(randomPattern);\n            patternRadioGroup.option(centerOutPattern);\n            patternRadioGroup.parent(\"controls\");\n            patternRadioGroup.style(\"margin\", \"auto\");\n            patternRadioGroup.style(\"text-align\", \"center\");\n\n            patternRadioGroup.selected(randomPattern);\n\n            currentPattern = patternRadioGroup.value();\n        };\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n\n            p.angleMode(p.DEGREES);\n            hexGrid = createHexGrid();\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            if (patternRadioGroup.value() !== currentPattern) {\n                currentPattern = patternRadioGroup.value();\n                hexGrid = createHexGrid();\n            }\n\n            hexGrid.update();\n            hexGrid.show();\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n            hexGrid = createHexGrid();\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementById(\"canvas\").replaceChildren();\n        document.getElementById(\"controls\").replaceChildren();\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <FullscreenElem id='canvas' />\n                <div id='controls'></div>\n            </div>\n        );\n    }\n}\nexport default Hexes;\n"],"names":["Hex","constructor","p","x","y","maxSideLength","this","sideLength","growing","growthRate","fillColour","color","outlineColour","setSideLength","grow","shrink","setColour","update","show","pointA","p5","fromAngle","radians","add","pointB","pointC","pointD","pointE","pointF","push","fill","strokeWeight","stroke","beginShape","vertex","endShape","CLOSE","pop","HexGrid","canvasWidth","canvasHeight","hexSideLength","horizontalHexSpacing","sin","verticleHexSpacing","maxHexXPos","maxHexYPos","hexes","__createHexes","visited","explore","length","coord","matchesThisCoord","element","xDiff","Math","abs","yDiff","some","surroundingHexes","__getSurroundingHexes","concat","forEach","h","hex","translate","timeBetweenColourChange","CenterOutHexGrid","super","lastHueIncrementTime","Date","now","setCenterOutPattern","colorMode","HSL","maxDistFromCenter","dist","hexDistFromCenter","startingSideLength","map","hue","saturation","lightness","currentTime","RandomHexGrid","setRandomPattern","maxColourVal","random","sat","light","startingSize","Hexes","React","props","sketch","hexGrid","currentPattern","patternRadioGroup","randomPattern","centerOutPattern","getCanvasHeight","window","innerHeight","getCanvasWidth","innerWidth","getSideLength","min","createHexGrid","setup","cnv","createCanvas","parent","style","createRadio","option","selected","value","angleMode","DEGREES","draw","background","windowResized","resizeCanvas","myRef","componentDidMount","myP5","current","componentWillUnmount","document","getElementById","replaceChildren","render","_jsxs","ref","children","_jsx","FullscreenElem","id"],"sourceRoot":""}