{"version":3,"file":"static/js/68.c5042f11.chunk.js","mappings":"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","sources":["sketches/flockingSimulation/Bird.js","sketches/flockingSimulation/FlockingSimulation.jsx"],"sourcesContent":["import p5 from \"p5\";\n\nexport default class Bird {\n    constructor(p, x, y, id) {\n        this.p = p;\n        this.uuid = id;\n        this.pos = this.p.createVector(x, y);\n        this.r = 5;\n        this.heading = this.p.createVector(\n            this.p.random(-1, 1),\n            this.p.random(-1, 1)\n        );\n    }\n\n    show(neighbourhood, showNeighbourhood) {\n        this.p.push();\n\n        this.p.translate(this.pos.x, this.pos.y);\n        this.p.rotate(this.heading.heading() + this.p.PI / 2);\n\n        if (showNeighbourhood) {\n            this.p.push();\n            this.p.fill(255, 50);\n            this.p.noStroke();\n            this.p.ellipse(0, 0, neighbourhood * 2, neighbourhood * 2);\n            this.p.pop();\n        }\n\n        this.p.fill(255);\n        this.p.triangle(-10, 10, 0, -10, 10, 10);\n\n        this.p.pop();\n    }\n\n    update(birds, sepMult, alignMult, cohMult, neighbourhood, maxX, maxY) {\n        const otherBirds = birds.filter((bird) => {\n            const distance = this.p.dist(\n                this.pos.x,\n                this.pos.y,\n                bird.pos.x,\n                bird.pos.y\n            );\n            return bird.uuid !== this.uuid && distance < neighbourhood;\n        });\n\n        const sepHeading = this.separate(otherBirds).mult(sepMult);\n        const alignHeading = this.align(otherBirds).mult(alignMult);\n        const cohHeading = this.cohesion(otherBirds).mult(cohMult);\n\n        const desiredHeading = this.p.createVector(0, 0);\n        desiredHeading.add(sepHeading);\n        desiredHeading.add(alignHeading);\n        desiredHeading.add(cohHeading);\n        desiredHeading.normalize();\n\n        this.changeHeading(desiredHeading);\n\n        this.pos.add(this.heading);\n        this.keepInBounds(0, 0, maxX, maxY);\n    }\n\n    // Move away from other birds in the flock to avoid crowding\n    separate(birds) {\n        let acc = this.p.createVector(0, 0);\n\n        birds.forEach((bird) => {\n            let headingToBird = p5.Vector.sub(bird.pos, this.pos);\n            acc.add(headingToBird);\n        });\n\n        acc.normalize();\n        return acc.mult(-1);\n    }\n\n    // Steer towards the local heading of the flock\n    align(birds) {\n        let acc = this.p.createVector(0, 0);\n\n        birds.forEach((bird) => {\n            acc.add(bird.heading);\n        });\n\n        return acc.normalize();\n    }\n\n    // Move towards the center of the local flock\n    cohesion(birds) {\n        let acc = this.p.createVector(0, 0);\n\n        if (birds.length === 0) {\n            return acc;\n        }\n\n        birds.forEach((bird) => {\n            acc.add(bird.pos);\n        });\n\n        const avgPos = p5.Vector.div(acc, birds.length);\n        const headingToAvgPos = p5.Vector.sub(avgPos, this.pos);\n        return headingToAvgPos.normalize();\n    }\n\n    keepInBounds(minX, minY, maxX, maxY) {\n        const closestInbounds = this.pos.copy();\n\n        if (this.pos.x < minX) {\n            closestInbounds.x = minX;\n        }\n\n        if (this.pos.y < minY) {\n            closestInbounds.y = minY;\n        }\n\n        if (this.pos.x > maxX) {\n            closestInbounds.x = maxX;\n        }\n\n        if (this.pos.y > maxY) {\n            closestInbounds.y = maxY;\n        }\n\n        if (!closestInbounds.equals(this.pos)) {\n            const headingToInbounds = p5.Vector.sub(closestInbounds, this.pos);\n            this.changeHeading(headingToInbounds);\n        }\n    }\n\n    changeHeading(desiredHeading) {\n        const desiredHeadingRatio = 0.1;\n        const currentHeadingRatio = 1 - desiredHeadingRatio;\n        const desiredPart = p5.Vector.mult(desiredHeading, desiredHeadingRatio);\n        const currentPart = p5.Vector.mult(this.heading, currentHeadingRatio);\n        const newHeading = currentPart.add(desiredPart);\n        newHeading.normalize();\n        this.heading = newHeading;\n    }\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport Bird from \"./Bird\";\nimport \"./FlockingSimulation.scss\";\n\nclass FlockingSimulation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let birds = [];\n        let sepMult = 50;\n        let alignMult = 50;\n        let cohMult = 40;\n        let neighbourhood = 100;\n        let sepMultSlider, alignMultSlider, cohMultSlider, neighbourhoodSlider;\n        let neighbourhoodCheckbox;\n\n        p.setup = () => {\n            var cnv = p.createCanvas(p.windowWidth, p.windowHeight * 0.9);\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            for (let i = 0; i < 100; i++) {\n                const rndX = p.random(0, p.windowWidth);\n                const rndY = p.random(0, p.windowHeight * 0.9);\n                birds.push(new Bird(p, rndX, rndY, i));\n            }\n\n            createControls();\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            sepMult = sepMultSlider.value();\n            alignMult = alignMultSlider.value();\n            cohMult = cohMultSlider.value();\n            neighbourhood = neighbourhoodSlider.value();\n\n            birds.forEach((bird) => {\n                bird.update(\n                    birds,\n                    sepMult,\n                    alignMult,\n                    cohMult,\n                    neighbourhood,\n                    p.windowWidth,\n                    p.windowHeight * 0.9\n                );\n                bird.show(neighbourhood, neighbourhoodCheckbox.checked());\n            });\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(p.windowWidth, p.windowHeight * 0.9);\n        };\n\n        function createControls() {\n            sepMultSlider = p.createSlider(0, 100, sepMult);\n            sepMultSlider.parent(\"sepDiv\");\n\n            alignMultSlider = p.createSlider(0, 100, alignMult);\n            alignMultSlider.parent(\"alignDiv\");\n\n            cohMultSlider = p.createSlider(0, 100, cohMult);\n            cohMultSlider.parent(\"cohDiv\");\n\n            neighbourhoodSlider = p.createSlider(0, 200, neighbourhood);\n            neighbourhoodSlider.parent(\"neighbourhoodDiv\");\n            neighbourhoodSlider.style(\"display\", \"inline-block\");\n\n            neighbourhoodCheckbox = p.createCheckbox(\"Show\", false);\n            neighbourhoodCheckbox.parent(\"neighbourhoodDiv\");\n            neighbourhoodCheckbox.style(\"display\", \"inline-block\");\n        }\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementById(\"canvas\").replaceChildren();\n        document.getElementById(\"sepDiv\").children[1].remove();\n        document.getElementById(\"alignDiv\").children[1].remove();\n        document.getElementById(\"cohDiv\").children[1].remove();\n        document.getElementById(\"neighbourhoodDiv\").children[1].remove();\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <div id='canvas'></div>\n                <div id='controls'>\n                    <div id='sepDiv' className='slider'>\n                        <p>Separation</p>\n                    </div>\n                    <div id='alignDiv' className='slider'>\n                        <p>Alignment</p>\n                    </div>\n                    <div id='cohDiv' className='slider'>\n                        <p>Cohesion</p>\n                    </div>\n                    <div id='neighbourhoodDiv' className='slider'>\n                        <p>Neighbourhood</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default FlockingSimulation;\n"],"names":["Bird","p","x","y","id","this","uuid","pos","createVector","r","heading","random","neighbourhood","showNeighbourhood","push","translate","rotate","PI","fill","noStroke","ellipse","pop","triangle","birds","sepMult","alignMult","cohMult","maxX","maxY","otherBirds","filter","bird","distance","dist","sepHeading","separate","mult","alignHeading","align","cohHeading","cohesion","desiredHeading","add","normalize","changeHeading","keepInBounds","acc","forEach","headingToBird","p5","length","avgPos","minX","minY","closestInbounds","copy","equals","headingToInbounds","desiredPart","newHeading","FlockingSimulation","props","sketch","sepMultSlider","alignMultSlider","cohMultSlider","neighbourhoodSlider","neighbourhoodCheckbox","setup","cnv","createCanvas","windowWidth","windowHeight","parent","style","i","rndX","rndY","createSlider","createCheckbox","draw","background","value","update","show","checked","windowResized","resizeCanvas","myRef","React","myP5","current","document","getElementById","replaceChildren","children","remove","ref","className"],"sourceRoot":""}