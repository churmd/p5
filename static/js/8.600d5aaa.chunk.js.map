{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","sketches/hexes/Hex.js","sketches/hexes/HexGrid.js","sketches/hexes/CenterOutHexGrid.js","sketches/hexes/RandomHexGrid.js","sketches/hexes/Hexes.jsx"],"names":["target","property","receiver","Reflect","get","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","value","Hex","p","x","y","maxSideLength","this","sideLength","growing","growthRate","fillColour","color","outlineColour","pointA","p5","Vector","fromAngle","radians","add","pointB","pointC","pointD","pointE","pointF","push","fill","strokeWeight","stroke","beginShape","vertex","endShape","CLOSE","pop","HexGrid","canvasWidth","canvasHeight","hexSideLength","horizontalHexSpacing","sin","verticleHexSpacing","maxHexXPos","maxHexYPos","hexes","__createHexes","visited","explore","coord","some","element","xDiff","Math","abs","yDiff","surroundingHexes","__getSurroundingHexes","concat","length","forEach","h","hex","update","translate","show","CenterOutHexGrid","lastHueIncrementTime","Date","now","setCenterOutPattern","colorMode","HSL","maxDistFromCenter","dist","hexDistFromCenter","startingSideLength","map","setSideLength","grow","hue","saturation","lightness","setColour","currentTime","RandomHexGrid","setRandomPattern","maxColourVal","random","sat","light","startingSize","shrink","Hexes","props","sketch","hexGrid","currentPattern","patternRadioGroup","randomPattern","centerOutPattern","getCanvasHeight","window","innerHeight","getCanvasWidth","innerWidth","getSideLength","min","createHexGrid","setup","cnv","createCanvas","parent","style","createRadio","option","selected","angleMode","DEGREES","draw","background","windowResized","resizeCanvas","myRef","React","createRef","myP5","current","ref","FullscreenElem","id","Component"],"mappings":"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","file":"static/js/8.600d5aaa.chunk.js","sourcesContent":["import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","import p5 from \"p5\";\n\nexport default class Hex {\n    constructor(p, x, y, maxSideLength) {\n        this.p = p;\n        this.x = x;\n        this.y = y;\n        this.maxSideLength = maxSideLength;\n        this.sideLength = maxSideLength;\n        this.growing = false;\n        this.growthRate = 0;\n        this.fillColour = p.color(255, 255, 255);\n        this.outlineColour = p.color(0, 0, 0);\n    }\n\n    setSideLength(sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    grow() {\n        this.growing = true;\n    }\n\n    shrink() {\n        this.growing = false;\n    }\n\n    setColour(fillColour, outlineColour) {\n        this.fillColour = fillColour;\n        this.outlineColour = outlineColour;\n    }\n\n    update() {\n        this.growthRate = 0.1;\n        if (this.sideLength >= this.maxSideLength) {\n            this.growing = false;\n        }\n\n        if (this.sideLength <= 1) {\n            this.growing = true;\n        }\n\n        if (this.growing) {\n            this.sideLength += this.growthRate;\n            if (this.sideLength > this.maxSideLength) {\n                this.sideLength = this.maxSideLength;\n            }\n        } else {\n            this.sideLength -= this.growthRate;\n            if (this.sideLength < 1) {\n                this.sideLength = 1;\n            }\n        }\n    }\n\n    show() {\n        let pointA = p5.Vector.fromAngle(this.p.radians(-90), this.sideLength);\n        pointA.add(this.x, this.y);\n\n        let pointB = p5.Vector.fromAngle(this.p.radians(-30), this.sideLength);\n        pointB.add(this.x, this.y);\n\n        let pointC = p5.Vector.fromAngle(this.p.radians(30), this.sideLength);\n        pointC.add(this.x, this.y);\n\n        let pointD = p5.Vector.fromAngle(this.p.radians(90), this.sideLength);\n        pointD.add(this.x, this.y);\n\n        let pointE = p5.Vector.fromAngle(this.p.radians(150), this.sideLength);\n        pointE.add(this.x, this.y);\n\n        let pointF = p5.Vector.fromAngle(this.p.radians(210), this.sideLength);\n        pointF.add(this.x, this.y);\n\n        this.p.push();\n\n        this.p.fill(this.fillColour);\n        this.p.strokeWeight(1);\n        this.p.stroke(this.outlineColour);\n\n        this.p.beginShape();\n        this.p.vertex(pointA.x, pointA.y);\n        this.p.vertex(pointB.x, pointB.y);\n        this.p.vertex(pointC.x, pointC.y);\n        this.p.vertex(pointD.x, pointD.y);\n        this.p.vertex(pointE.x, pointE.y);\n        this.p.vertex(pointF.x, pointF.y);\n        this.p.endShape(this.p.CLOSE);\n\n        this.p.pop();\n    }\n}\n","import Hex from \"./Hex\";\n\n/**\n * Creates a tiled hex grid with a hex placed in the center of the screen.\n */\nexport default class HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        this.p = p;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.hexSideLength = hexSideLength;\n\n        const horizontalHexSpacing = p.sin(60) * hexSideLength * 2;\n        const verticleHexSpacing = 2 * hexSideLength * 0.75;\n\n        const midWidth = canvasWidth / 2;\n        const midHeight = canvasHeight / 2;\n\n        const maxHexXPos = midWidth + horizontalHexSpacing / 2;\n        const maxHexYPos = midHeight + verticleHexSpacing / 2;\n\n        this.hexes = this.__createHexes(\n            horizontalHexSpacing,\n            verticleHexSpacing,\n            maxHexXPos,\n            maxHexYPos\n        );\n    }\n\n    __createHexes(\n        horizontalHexSpacing,\n        verticleHexSpacing,\n        maxHexXPos,\n        maxHexYPos\n    ) {\n        let hexes = [];\n        let visited = [];\n        let explore = [];\n\n        explore.push({ x: 0, y: 0 });\n\n        while (explore.length > 0) {\n            let coord = explore.pop();\n\n            // Coordinates are floating points, so checking for equality is difficult\n            // and converting to int leads to rounding issues.\n            // So just check there is not a very close coordinate already visited.\n            const matchesThisCoord = (element) => {\n                let xDiff = Math.abs(element.x - coord.x);\n                let yDiff = Math.abs(element.y - coord.y);\n                return xDiff < 2 && yDiff < 2;\n            };\n\n            if (visited.some(matchesThisCoord)) {\n                continue;\n            }\n\n            if (\n                coord.x > maxHexXPos ||\n                coord.x < -maxHexXPos ||\n                coord.y > maxHexYPos ||\n                coord.y < -maxHexYPos\n            ) {\n                continue;\n            }\n\n            visited.push(coord);\n\n            let surroundingHexes = this.__getSurroundingHexes(\n                coord,\n                horizontalHexSpacing,\n                verticleHexSpacing\n            );\n            explore = explore.concat(surroundingHexes);\n        }\n\n        visited.forEach((coord) => {\n            let h = new Hex(this.p, coord.x, coord.y, this.hexSideLength);\n            hexes.push(h);\n        });\n\n        return hexes;\n    }\n\n    __getSurroundingHexes(coord, horizontalHexSpacing, verticleHexSpacing) {\n        let surroundingHexes = [];\n\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n\n        return surroundingHexes;\n    }\n\n    update() {\n        this.hexes.forEach((hex) => {\n            hex.update();\n        });\n    }\n\n    show() {\n        this.p.push();\n        this.p.translate(this.canvasWidth / 2, this.canvasHeight / 2);\n\n        this.hexes.forEach((hex) => {\n            hex.show();\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nconst timeBetweenColourChange = (60 / 255) * 1000;\n\nexport default class CenterOutHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.lastHueIncrementTime = Date.now();\n        this.setCenterOutPattern();\n    }\n\n    setCenterOutPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        const maxDistFromCenter = this.p.dist(\n            this.canvasWidth / 2,\n            this.canvasHeight / 2,\n            0,\n            0\n        );\n\n        this.hexes.forEach((hex) => {\n            const hexDistFromCenter = this.p.dist(hex.x, hex.y, 0, 0);\n            const startingSideLength = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                this.hexSideLength,\n                0\n            );\n            hex.setSideLength(startingSideLength);\n            hex.grow();\n\n            const hue = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                180,\n                50\n            );\n            const fillColour = this.p.color(0, 150, hue);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n\n    update() {\n        super.update();\n\n        const currentTime = Date.now();\n        if (currentTime - this.lastHueIncrementTime < timeBetweenColourChange) {\n            return;\n        }\n\n        this.lastHueIncrementTime = currentTime;\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const fillColour = this.p.color(\n                this.p.hue(hex.fillColour) + 1,\n                this.p.saturation(hex.fillColour),\n                this.p.lightness(hex.fillColour)\n            );\n            const outlineColour = this.p.color(\n                this.p.hue(hex.outlineColour) + 1,\n                this.p.saturation(hex.outlineColour),\n                this.p.lightness(hex.outlineColour)\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nexport default class RandomHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.setRandomPattern();\n    }\n\n    setRandomPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const maxColourVal = 256;\n            const hue = this.p.random(0, maxColourVal);\n            const sat = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const light = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const fillColour = this.p.color(hue, sat, light);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n\n            const startingSize = this.p.random(0, this.hexSideLength);\n            hex.setSideLength(startingSize);\n\n            const isGrowing = this.p.random([true, false]);\n            if (isGrowing) {\n                hex.grow();\n            } else {\n                hex.shrink();\n            }\n        });\n\n        this.p.pop();\n    }\n\n    __;\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport CenterOutHexGrid from \"./CenterOutHexGrid\";\nimport HexGrid from \"./HexGrid\";\nimport RandomHexGrid from \"./RandomHexGrid\";\nimport \"./Hexes.scss\";\nimport FullscreenElem from \"../../components/fullscreenElem/FullscreenElem\";\n\nclass Hexes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let hexGrid;\n        let currentPattern;\n        let patternRadioGroup;\n\n        const randomPattern = \"Random\";\n        const centerOutPattern = \"CenterOutPattern\";\n\n        const getCanvasHeight = () => {\n            return window.innerHeight;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n\n        const getSideLength = () => {\n            let minDim = Math.min(getCanvasHeight(), getCanvasWidth());\n            return 0.05 * minDim;\n        };\n\n        const createHexGrid = () => {\n            switch (currentPattern) {\n                case randomPattern:\n                    return new RandomHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                case centerOutPattern:\n                    return new CenterOutHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                default:\n                    return new HexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n            }\n        };\n\n        const createControls = () => {\n            patternRadioGroup = p.createRadio();\n            patternRadioGroup.option(randomPattern);\n            patternRadioGroup.option(centerOutPattern);\n            patternRadioGroup.parent(\"controls\");\n            patternRadioGroup.style(\"margin\", \"auto\");\n            patternRadioGroup.style(\"text-align\", \"center\");\n\n            patternRadioGroup.selected(randomPattern);\n\n            currentPattern = patternRadioGroup.value();\n        };\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n\n            p.angleMode(p.DEGREES);\n            hexGrid = createHexGrid();\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            if (patternRadioGroup.value() !== currentPattern) {\n                currentPattern = patternRadioGroup.value();\n                hexGrid = createHexGrid();\n            }\n\n            hexGrid.update();\n            hexGrid.show();\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n            hexGrid = createHexGrid();\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <FullscreenElem id='canvas' />\n                <div id='controls'></div>\n            </div>\n        );\n    }\n}\nexport default Hexes;\n"],"sourceRoot":""}