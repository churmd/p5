{"version":3,"sources":["sketches/snowfalkeGenerator/SnowflakeGenerator.jsx"],"names":["SnowflakeGenerator","props","sketch","p","snowflakeBranch","newestPoint","sameSnowflakeCounter","clearSnowflake","background","showPoint","point","ellipse","x","y","pointRadius","isIntersecting","i","length","existingPoint","dist","randomWalkPoint","angleThreshold","random","angle","heading","constrain","magnitude","mag","point2","p5","Vector","fromAngle","setMag","setup","createCanvas","windowWidth","windowHeight","style","frameRate","draw","countBeforeClearing","getFrameRate","minWindowSize","Math","min","createVector","counter","TWO_PI","push","addNextPoint","translate","rotate","rotationAmount","scale","pop","windowResized","resizeCanvas","myRef","React","createRef","this","myP5","current","ref","Component"],"mappings":"8LAGMA,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAIPC,OAAS,SAACC,GACT,IAGIC,EACAC,EACAC,EA8CJ,SAASC,IACRJ,EAAEK,WAAW,IACbJ,EAAkB,GAClBC,EAAc,KACdC,EAAuB,EAGxB,SAASG,EAAUC,GAClBP,EAAEQ,QAAQD,EAAME,EAAGF,EAAMG,EAAGC,EAAiBA,GA+B9C,SAASC,EAAeL,GACvB,IAAK,IAAIM,EAAI,EAAGA,EAAIZ,EAAgBa,OAAQD,IAAK,CAChD,IAAME,EAAgBd,EAAgBY,GAOtC,GANwBb,EAAEgB,KACzBD,EAAcN,EACdM,EAAcL,EACdH,EAAME,EACNF,EAAMG,IAEgBC,EACtB,OAAO,EAGT,OAAO,EAIR,SAASM,EAAgBV,EAAOW,GAC/BX,EAAME,GAAK,EACXF,EAAMG,GAAKV,EAAEmB,QAAQ,EAAG,GAExB,IAAIC,EAAQb,EAAMc,UAClBD,EAAQpB,EAAEsB,UAAUF,EAAO,EAAGF,GAE9B,IAAMK,EAAYhB,EAAMiB,MAClBC,EAASC,IAAGC,OAAOC,UAAUR,GACnCK,EAAOI,OAAON,GAEdhB,EAAME,EAAIgB,EAAOhB,EACjBF,EAAMG,EAAIe,EAAOf,EAhHlBV,EAAE8B,MAAQ,WACC9B,EAAE+B,aAAa/B,EAAEgC,YAAahC,EAAEiC,cACtCC,MAAM,UAAW,SACrBlC,EAAEmC,UAAU,IACZ/B,KAGDJ,EAAEoC,KAAO,WACR,IAAMC,EAbgC,EAcrCrC,EAAEsC,eAMH,GALInC,EAAuBkC,GAC1BjC,IA8CF,WACC,IAAMmC,EAAgBC,KAAKC,IAC1BzC,EAAEgC,YAAc,EAChBhC,EAAEiC,aAAe,GAEZ1B,EAAQP,EAAE0C,aAAaH,EAAe,GACxCI,EAAU,EAEd,KACC1B,EAAgBV,EAAOP,EAAE4C,OAAF,MACnBrC,EAAME,EAAI,GAAKG,EAAeL,KAGlCoC,IAGD,OAAIA,EAAU,IACb1C,EAAgB4C,KAAKtC,GACrBL,EAAcK,GACP,GA9DWuC,GACnB,CAOA9C,EAAE+C,UAAU/C,EAAEgC,YAAc,EAAGhC,EAAEiC,aAAe,GAChDjC,EAAEgD,OAAOhD,EAAE4C,OAAF,IAGT,IADA,IAAMK,EAAiBjD,EAAE4C,OAhCN,EAiCV/B,EAAI,EAAGA,EAjCG,EAiCcA,IAChCb,EAAEgD,OAAOC,GAET3C,EAAUJ,GAEVF,EAAE6C,OACF7C,EAAEkD,MAAM,GAAI,GACZ5C,EAAUJ,GACVF,EAAEmD,WAlBFhD,KAsBFH,EAAEoD,cAAgB,WACjBpD,EAAEqD,aAAarD,EAAEgC,YAAahC,EAAEiC,cAChC7B,MAnDD,EAAKkD,MAAQC,IAAMC,YAFD,E,qDAiInB,WACCC,KAAKC,KAAO,IAAIhC,IAAG+B,KAAK1D,OAAQ0D,KAAKH,MAAMK,W,oBAG5C,WACC,OAAO,qBAAKC,IAAKH,KAAKH,Y,GAvISC,IAAMM,WA0IxBhE","file":"static/js/15.9187e9b2.chunk.js","sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\n\nclass SnowflakeGenerator extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.myRef = React.createRef();\n\t}\n\n\tsketch = (p) => {\n\t\tconst numBranches = 6;\n\t\tconst pointRadius = 3;\n\t\tconst secondsToKeepFinishedSnowflake = 3;\n\t\tlet snowflakeBranch;\n\t\tlet newestPoint;\n\t\tlet sameSnowflakeCounter;\n\n\t\tp.setup = () => {\n\t\t\tvar cnv = p.createCanvas(p.windowWidth, p.windowHeight);\n\t\t\tcnv.style(\"display\", \"block\");\n\t\t\tp.frameRate(10);\n\t\t\tclearSnowflake();\n\t\t};\n\n\t\tp.draw = () => {\n\t\t\tconst countBeforeClearing =\n\t\t\t\tp.getFrameRate() * secondsToKeepFinishedSnowflake;\n\t\t\tif (sameSnowflakeCounter > countBeforeClearing) {\n\t\t\t\tclearSnowflake();\n\t\t\t}\n\n\t\t\tconst pointAdded = addNextPoint();\n\t\t\tif (!pointAdded) {\n\t\t\t\tsameSnowflakeCounter++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Center drawing on screen\n\t\t\t// rotate so top and bottom snowflake branches are vertically aligned\n\t\t\tp.translate(p.windowWidth / 2, p.windowHeight / 2);\n\t\t\tp.rotate(p.TWO_PI / (numBranches * 2));\n\n\t\t\tconst rotationAmount = p.TWO_PI / numBranches;\n\t\t\tfor (let i = 0; i < numBranches; i++) {\n\t\t\t\tp.rotate(rotationAmount);\n\n\t\t\t\tshowPoint(newestPoint);\n\n\t\t\t\tp.push();\n\t\t\t\tp.scale(1, -1);\n\t\t\t\tshowPoint(newestPoint);\n\t\t\t\tp.pop();\n\t\t\t}\n\t\t};\n\n\t\tp.windowResized = () => {\n\t\t\tp.resizeCanvas(p.windowWidth, p.windowHeight);\n\t\t\tclearSnowflake();\n\t\t};\n\n\t\t// Clears the screen and resets the snowflake branch to be empty.\n\t\tfunction clearSnowflake() {\n\t\t\tp.background(51);\n\t\t\tsnowflakeBranch = [];\n\t\t\tnewestPoint = null;\n\t\t\tsameSnowflakeCounter = 0;\n\t\t}\n\n\t\tfunction showPoint(point) {\n\t\t\tp.ellipse(point.x, point.y, pointRadius * 2, pointRadius * 2);\n\t\t}\n\n\t\t// Add another point to the snowflake branch, if there is space on screen.\n\t\t// Returns true if a new point was added the the branch, false if not.\n\t\tfunction addNextPoint() {\n\t\t\tconst minWindowSize = Math.min(\n\t\t\t\tp.windowWidth / 2,\n\t\t\t\tp.windowHeight / 2\n\t\t\t);\n\t\t\tconst point = p.createVector(minWindowSize, 0);\n\t\t\tlet counter = 0;\n\n\t\t\twhile (true) {\n\t\t\t\trandomWalkPoint(point, p.TWO_PI / (numBranches * 2));\n\t\t\t\tif (point.x < 1 || isIntersecting(point)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\n\t\t\tif (counter > 0) {\n\t\t\t\tsnowflakeBranch.push(point);\n\t\t\t\tnewestPoint = point;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Check if a point is intersecting with any of the existing points in the snowflake branch\n\t\tfunction isIntersecting(point) {\n\t\t\tfor (let i = 0; i < snowflakeBranch.length; i++) {\n\t\t\t\tconst existingPoint = snowflakeBranch[i];\n\t\t\t\tconst distanceBetween = p.dist(\n\t\t\t\t\texistingPoint.x,\n\t\t\t\t\texistingPoint.y,\n\t\t\t\t\tpoint.x,\n\t\t\t\t\tpoint.y\n\t\t\t\t);\n\t\t\t\tif (distanceBetween <= pointRadius * 2) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t// Walk the point to the left keeping it within the angle specified from the origin\n\t\tfunction randomWalkPoint(point, angleThreshold) {\n\t\t\tpoint.x -= 1;\n\t\t\tpoint.y += p.random(-3, 3);\n\n\t\t\tlet angle = point.heading();\n\t\t\tangle = p.constrain(angle, 0, angleThreshold);\n\n\t\t\tconst magnitude = point.mag();\n\t\t\tconst point2 = p5.Vector.fromAngle(angle);\n\t\t\tpoint2.setMag(magnitude);\n\n\t\t\tpoint.x = point2.x;\n\t\t\tpoint.y = point2.y;\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.myP5 = new p5(this.sketch, this.myRef.current);\n\t}\n\n\trender() {\n\t\treturn <div ref={this.myRef}></div>;\n\t}\n}\nexport default SnowflakeGenerator;\n"],"sourceRoot":""}