{"version":3,"file":"static/js/65.0e956f59.chunk.js","mappings":"gMAGMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYC,GAAQ,IAAD,yBACf,cAAMA,IAIVC,OAAS,SAACC,GACN,IAGIC,EACAC,EACAC,EA8CJ,SAASC,IACLJ,EAAEK,WAAW,IACbJ,EAAkB,GAClBC,EAAc,KACdC,EAAuB,CAC1B,CAED,SAASG,EAAUC,GACfP,EAAEQ,QAAQD,EAAME,EAAGF,EAAMG,EAAGC,EAAiBA,EAChD,CA8BD,SAASC,EAAeL,GACpB,IAAK,IAAIM,EAAI,EAAGA,EAAIZ,EAAgBa,OAAQD,IAAK,CAC7C,IAAME,EAAgBd,EAAgBY,GAOtC,GANwBb,EAAEgB,KACtBD,EAAcN,EACdM,EAAcL,EACdH,EAAME,EACNF,EAAMG,IAEaC,EACnB,OAAO,CAEd,CACD,OAAO,CACV,CAGD,SAASM,EAAgBV,EAAOW,GAC5BX,EAAME,GAAK,EACXF,EAAMG,GAAKV,EAAEmB,QAAQ,EAAG,GAExB,IAAIC,EAAQb,EAAMc,UAClBD,EAAQpB,EAAEsB,UAAUF,EAAO,EAAGF,GAE9B,IAAMK,EAAYhB,EAAMiB,MAClBC,EAASC,IAAAA,OAAAA,UAAoBN,GACnCK,EAAOE,OAAOJ,GAEdhB,EAAME,EAAIgB,EAAOhB,EACjBF,EAAMG,EAAIe,EAAOf,CACpB,CAjHDV,EAAE4B,MAAQ,WACI5B,EAAE6B,aAAa7B,EAAE8B,YAAa9B,EAAE+B,cACtCC,MAAM,UAAW,SACrBhC,EAAEiC,UAAU,IACZ7B,GACH,EAEDJ,EAAEkC,KAAO,WACL,IAAMC,EAb6B,EAc/BnC,EAAEoC,eAMN,GALIjC,EAAuBgC,GACvB/B,IA8CR,WACI,IAAMiC,EAAgBC,KAAKC,IACvBvC,EAAE8B,YAAc,EAChB9B,EAAE+B,aAAe,GAEfxB,EAAQP,EAAEwC,aAAaH,EAAe,GACxCI,EAAU,EAEd,KACIxB,EAAgBV,EAAOP,EAAE0C,OAAF,MACnBnC,EAAME,EAAI,GAAKG,EAAeL,KAGlCkC,IAGJ,OAAIA,EAAU,IACVxC,EAAgB0C,KAAKpC,GACrBL,EAAcK,GACP,EAId,CAlEsBqC,GACnB,CAOA5C,EAAE6C,UAAU7C,EAAE8B,YAAc,EAAG9B,EAAE+B,aAAe,GAChD/B,EAAE8C,OAAO9C,EAAE0C,OAAF,IAGT,IADA,IAAMK,EAAiB/C,EAAE0C,OAhCT,EAiCP7B,EAAI,EAAGA,EAjCA,EAiCiBA,IAC7Bb,EAAE8C,OAAOC,GAETzC,EAAUJ,GAEVF,EAAE2C,OACF3C,EAAEgD,MAAM,GAAI,GACZ1C,EAAUJ,GACVF,EAAEiD,KAhBL,MAFG9C,GAoBP,EAEDH,EAAEkD,cAAgB,WACdlD,EAAEmD,aAAanD,EAAE8B,YAAa9B,EAAE+B,cAChC3B,GACH,CAyEJ,EA7HG,EAAKgD,MAAQC,EAAAA,YAFE,CAGlB,CAwIA,OAxIA,yCA8HD,WACIC,KAAKC,KAAO,IAAI7B,IAAJ,CAAO4B,KAAKvD,OAAQuD,KAAKF,MAAMI,QAC9C,qCAED,WACIC,SAASC,qBAAqB,UAAU,GAAGC,QAC9C,uBAED,WACI,OAAO,gBAAKC,IAAKN,KAAKF,OACzB,OA5ICvD,CAA2BwD,EAAAA,WA8IjC,W","sources":["sketches/snowfalkeGenerator/SnowflakeGenerator.jsx"],"sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\n\nclass SnowflakeGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        const numBranches = 6;\n        const pointRadius = 3;\n        const secondsToKeepFinishedSnowflake = 3;\n        let snowflakeBranch;\n        let newestPoint;\n        let sameSnowflakeCounter;\n\n        p.setup = () => {\n            var cnv = p.createCanvas(p.windowWidth, p.windowHeight);\n            cnv.style(\"display\", \"block\");\n            p.frameRate(10);\n            clearSnowflake();\n        };\n\n        p.draw = () => {\n            const countBeforeClearing =\n                p.getFrameRate() * secondsToKeepFinishedSnowflake;\n            if (sameSnowflakeCounter > countBeforeClearing) {\n                clearSnowflake();\n            }\n\n            const pointAdded = addNextPoint();\n            if (!pointAdded) {\n                sameSnowflakeCounter++;\n                return;\n            }\n\n            // Center drawing on screen\n            // rotate so top and bottom snowflake branches are vertically aligned\n            p.translate(p.windowWidth / 2, p.windowHeight / 2);\n            p.rotate(p.TWO_PI / (numBranches * 2));\n\n            const rotationAmount = p.TWO_PI / numBranches;\n            for (let i = 0; i < numBranches; i++) {\n                p.rotate(rotationAmount);\n\n                showPoint(newestPoint);\n\n                p.push();\n                p.scale(1, -1);\n                showPoint(newestPoint);\n                p.pop();\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(p.windowWidth, p.windowHeight);\n            clearSnowflake();\n        };\n\n        // Clears the screen and resets the snowflake branch to be empty.\n        function clearSnowflake() {\n            p.background(51);\n            snowflakeBranch = [];\n            newestPoint = null;\n            sameSnowflakeCounter = 0;\n        }\n\n        function showPoint(point) {\n            p.ellipse(point.x, point.y, pointRadius * 2, pointRadius * 2);\n        }\n\n        // Add another point to the snowflake branch, if there is space on screen.\n        // Returns true if a new point was added the the branch, false if not.\n        function addNextPoint() {\n            const minWindowSize = Math.min(\n                p.windowWidth / 2,\n                p.windowHeight / 2\n            );\n            const point = p.createVector(minWindowSize, 0);\n            let counter = 0;\n\n            while (true) {\n                randomWalkPoint(point, p.TWO_PI / (numBranches * 2));\n                if (point.x < 1 || isIntersecting(point)) {\n                    break;\n                }\n                counter++;\n            }\n\n            if (counter > 0) {\n                snowflakeBranch.push(point);\n                newestPoint = point;\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        // Check if a point is intersecting with any of the existing points in the snowflake branch\n        function isIntersecting(point) {\n            for (let i = 0; i < snowflakeBranch.length; i++) {\n                const existingPoint = snowflakeBranch[i];\n                const distanceBetween = p.dist(\n                    existingPoint.x,\n                    existingPoint.y,\n                    point.x,\n                    point.y\n                );\n                if (distanceBetween <= pointRadius * 2) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        // Walk the point to the left keeping it within the angle specified from the origin\n        function randomWalkPoint(point, angleThreshold) {\n            point.x -= 1;\n            point.y += p.random(-3, 3);\n\n            let angle = point.heading();\n            angle = p.constrain(angle, 0, angleThreshold);\n\n            const magnitude = point.mag();\n            const point2 = p5.Vector.fromAngle(angle);\n            point2.setMag(magnitude);\n\n            point.x = point2.x;\n            point.y = point2.y;\n        }\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementsByTagName(\"canvas\")[0].remove();\n    }\n\n    render() {\n        return <div ref={this.myRef}></div>;\n    }\n}\nexport default SnowflakeGenerator;\n"],"names":["SnowflakeGenerator","props","sketch","p","snowflakeBranch","newestPoint","sameSnowflakeCounter","clearSnowflake","background","showPoint","point","ellipse","x","y","pointRadius","isIntersecting","i","length","existingPoint","dist","randomWalkPoint","angleThreshold","random","angle","heading","constrain","magnitude","mag","point2","p5","setMag","setup","createCanvas","windowWidth","windowHeight","style","frameRate","draw","countBeforeClearing","getFrameRate","minWindowSize","Math","min","createVector","counter","TWO_PI","push","addNextPoint","translate","rotate","rotationAmount","scale","pop","windowResized","resizeCanvas","myRef","React","this","myP5","current","document","getElementsByTagName","remove","ref"],"sourceRoot":""}