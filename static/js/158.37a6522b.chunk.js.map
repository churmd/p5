{"version":3,"file":"static/js/158.37a6522b.chunk.js","mappings":"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","sources":["sketches/beautifulTrig/BeautifulTrig.jsx"],"sourcesContent":["import React from \"react\";\nimport p5 from \"p5\";\nimport \"./BeautifulTrig.scss\";\n\nclass BeautifulTrig extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let angle = 0;\n        let numLines = 1;\n        let showTrigEnabled = false;\n        const rotationSpeed = 0.01;\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n        };\n\n        const createControls = () => {\n            const showTrigButton = p.createButton(\"Show Trigonometry\");\n            showTrigButton.parent(\"controls\");\n\n            showTrigButton.mousePressed(() => {\n                showTrigEnabled = !showTrigEnabled;\n                if (showTrigEnabled) {\n                    showTrigButton.html(\"Hide Trigonometry\");\n                    numLines = 2;\n                } else {\n                    showTrigButton.html(\"Show Trigonometry\");\n                    p.redraw();\n                }\n            });\n        };\n\n        p.draw = () => {\n            p.background(200);\n\n            const width = getCanvasWidth();\n            const height = getCanvasHeight();\n            const circleDiameter = Math.min(width, height) * 0.9;\n            const circleRadius = circleDiameter / 2;\n\n            p.translate(width / 2, height / 2);\n\n            showLines(circleRadius);\n            showOuterCircleLine(circleDiameter);\n            showTrigLines(circleRadius);\n            showPoints(circleRadius);\n            showOuterCirclePoint(circleRadius);\n\n            updateState();\n        };\n\n        const showLines = (circleRadius) => {\n            const roatationStep = p.PI / numLines;\n            for (let i = 0; i < numLines; i++) {\n                p.push();\n\n                p.rotate(i * roatationStep);\n                p.stroke(0);\n                p.strokeWeight(1);\n                p.line(-circleRadius, 0, circleRadius, 0);\n\n                p.pop();\n            }\n        };\n\n        const showOuterCircleLine = (circleDiameter) => {\n            p.push();\n\n            p.stroke(0);\n            p.strokeWeight(5);\n            p.noFill();\n            p.ellipse(0, 0, circleDiameter, circleDiameter);\n\n            p.pop();\n        };\n\n        const showTrigLines = (circleRadius) => {\n            if (!showTrigEnabled) {\n                return;\n            }\n            p.push();\n\n            p.colorMode(p.HSL, 360);\n            const sinColour = p.color(0, 200, 200);\n            const cosColour = p.color(180, 200, 200);\n\n            p.push();\n\n            p.noFill();\n            p.strokeWeight(5);\n\n            const sinArcDiameter = circleRadius * 0.9;\n            p.stroke(sinColour);\n            p.arc(0, 0, sinArcDiameter, sinArcDiameter, angle, 0);\n\n            const cosArcDiameter = circleRadius * 1.1;\n            p.stroke(cosColour);\n            p.arc(0, 0, cosArcDiameter, cosArcDiameter, angle, 0 + p.HALF_PI);\n\n            p.pop();\n\n            p.push();\n\n            const xPosOnCircle = p.cos(angle) * circleRadius;\n            const yPosOnCircle = p.sin(angle) * circleRadius;\n\n            const cosPosition = p.cos(angle) * circleRadius;\n            const sinePosition = p.sin(angle) * circleRadius;\n\n            p.stroke(0);\n            p.strokeWeight(2);\n            p.line(xPosOnCircle, yPosOnCircle, cosPosition, 0);\n            p.line(xPosOnCircle, yPosOnCircle, 0, sinePosition);\n            p.line(xPosOnCircle, yPosOnCircle, 0, 0);\n\n            p.pop();\n\n            // Need to consider where to place this on veritcal mobile phones\n\n            // const sinAngleDegrees = Math.abs(parseInt(p.degrees(angle)) % 360);\n            // const cosAngleDegrees = Math.abs(\n            //     parseInt(p.degrees(angle - p.HALF_PI)) % 360\n            // );\n\n            // p.textSize(30);\n            // p.textAlign(p.RIGHT);\n            // p.fill(sinColour);\n            // p.text(`Sin angle is ${sinAngleDegrees}`, getCanvasWidth() / 2, 0);\n            // p.fill(cosColour);\n            // p.text(`Cos angle is ${cosAngleDegrees}`, getCanvasWidth() / 2, 50);\n\n            p.pop();\n        };\n\n        const showPoints = (circleRadius) => {\n            const roatationStep = p.PI / numLines;\n            const pointOffset = -p.PI / numLines;\n            const pointSize = 0.05 * circleRadius;\n            for (let i = 0; i < numLines; i++) {\n                p.push();\n                p.rotate(i * roatationStep);\n\n                const pointAngle = angle + i * pointOffset;\n                const cosPosition = p.cos(pointAngle) * circleRadius;\n\n                p.colorMode(p.HSL, 360);\n                const hue = (360 / numLines) * i;\n                const colour = p.color(hue, 250, 200);\n\n                p.fill(colour);\n                p.stroke(0);\n                p.strokeWeight(2);\n\n                p.ellipse(cosPosition, 0, pointSize, pointSize);\n\n                p.pop();\n            }\n        };\n\n        const showOuterCirclePoint = (circleRadius) => {\n            const xPos = p.cos(angle) * circleRadius;\n            const yPos = p.sin(angle) * circleRadius;\n            const pointSize = 0.05 * circleRadius;\n\n            p.push();\n\n            p.stroke(0);\n            p.strokeWeight(2);\n            p.colorMode(p.HSL, 360);\n            const colour = p.color(0, 0, 360);\n            p.fill(colour);\n            p.ellipse(xPos, yPos, pointSize, pointSize);\n\n            p.pop();\n        };\n\n        const updateState = () => {\n            angle -= rotationSpeed;\n            if (angle < -p.TWO_PI) {\n                angle += p.TWO_PI;\n                if (!showTrigEnabled) {\n                    numLines += 1;\n                    if (numLines > 32) {\n                        numLines = 1;\n                    }\n                }\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n        };\n\n        const getCanvasHeight = () => {\n            return window.innerHeight * 0.95;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    componentWillUnmount() {\n        document.getElementById(\"canvas\").replaceChildren();\n        document.getElementById(\"controls\").replaceChildren();\n    }\n\n    render() {\n        return (\n            <div className='beautiful-trig-sketch' ref={this.myRef}>\n                <div id='canvas'></div>\n                <div id='controls'></div>\n            </div>\n        );\n    }\n}\n\nexport default BeautifulTrig;\n"],"names":["BeautifulTrig","props","sketch","p","angle","numLines","showTrigEnabled","setup","cnv","createCanvas","getCanvasWidth","getCanvasHeight","parent","style","createControls","showTrigButton","createButton","mousePressed","html","redraw","draw","background","width","height","circleDiameter","Math","min","circleRadius","translate","showLines","showOuterCircleLine","showTrigLines","showPoints","showOuterCirclePoint","updateState","roatationStep","PI","i","push","rotate","stroke","strokeWeight","line","pop","noFill","ellipse","colorMode","HSL","sinColour","color","cosColour","sinArcDiameter","arc","cosArcDiameter","HALF_PI","xPosOnCircle","cos","yPosOnCircle","sin","cosPosition","sinePosition","pointOffset","pointSize","pointAngle","hue","colour","fill","xPos","yPos","TWO_PI","windowResized","resizeCanvas","window","innerHeight","innerWidth","myRef","React","this","myP5","p5","current","document","getElementById","replaceChildren","className","ref","id"],"sourceRoot":""}