{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/fullscreenElem/FullscreenElem.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","sketches/hexes/Hex.js","sketches/hexes/HexGrid.js","sketches/hexes/CenterOutHexGrid.js","sketches/hexes/RandomHexGrid.js","sketches/hexes/Hexes.jsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","FullscreenElem","toggleCavasFullScreen","canvasElem","document","getElementById","fullscreenElement","exitFullScreen","openFullScreen","elem","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","this","props","onClick","React","Component","property","receiver","Reflect","get","base","prototype","hasOwnProperty","call","getPrototypeOf","desc","Hex","p","x","y","maxSideLength","sideLength","growing","growthRate","fillColour","color","outlineColour","pointA","p5","Vector","fromAngle","radians","add","pointB","pointC","pointD","pointE","pointF","fill","strokeWeight","stroke","beginShape","vertex","endShape","CLOSE","pop","HexGrid","canvasWidth","canvasHeight","hexSideLength","horizontalHexSpacing","sin","verticleHexSpacing","maxHexXPos","maxHexYPos","hexes","__createHexes","visited","explore","coord","some","element","xDiff","Math","abs","yDiff","surroundingHexes","__getSurroundingHexes","concat","h","hex","update","translate","show","CenterOutHexGrid","lastHueIncrementTime","Date","now","setCenterOutPattern","colorMode","HSL","maxDistFromCenter","dist","hexDistFromCenter","startingSideLength","map","setSideLength","grow","hue","saturation","lightness","setColour","currentTime","RandomHexGrid","setRandomPattern","maxColourVal","random","sat","light","startingSize","shrink","Hexes","sketch","hexGrid","currentPattern","patternRadioGroup","randomPattern","centerOutPattern","getCanvasHeight","window","innerHeight","getCanvasWidth","innerWidth","getSideLength","min","createHexGrid","setup","cnv","createCanvas","parent","style","createRadio","option","selected","angleMode","DEGREES","draw","background","windowResized","resizeCanvas","myRef","createRef","myP5","current","ref","id"],"mappings":"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","file":"static/js/6.51fff687.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import React from \"react\";\n\n/**\n * A div that when clicked will toggle between fullscreen mode.\n */\nclass FullscreenElem extends React.Component {\n    toggleCavasFullScreen = () => {\n        const canvasElem = document.getElementById(\"canvas\");\n        const currentFullScreenElem = document.fullscreenElement;\n        if (canvasElem === currentFullScreenElem) {\n            this.exitFullScreen(canvasElem);\n        } else {\n            this.openFullScreen(canvasElem);\n        }\n    };\n\n    openFullScreen = (elem) => {\n        if (elem.requestFullscreen) {\n            elem.requestFullscreen();\n        } else if (elem.webkitRequestFullscreen) {\n            /* Safari */\n            elem.webkitRequestFullscreen();\n        } else if (elem.msRequestFullscreen) {\n            /* IE11 */\n            elem.msRequestFullscreen();\n        }\n    };\n\n    exitFullScreen = (elem) => {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            /* Safari */\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n            /* IE11 */\n            document.msExitFullscreen();\n        }\n    };\n\n    render() {\n        return <div {...this.props} onClick={this.toggleCavasFullScreen}></div>;\n    }\n}\n\nexport default FullscreenElem;\n","import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","import p5 from \"p5\";\n\nexport default class Hex {\n    constructor(p, x, y, maxSideLength) {\n        this.p = p;\n        this.x = x;\n        this.y = y;\n        this.maxSideLength = maxSideLength;\n        this.sideLength = maxSideLength;\n        this.growing = false;\n        this.growthRate = 0;\n        this.fillColour = p.color(255, 255, 255);\n        this.outlineColour = p.color(0, 0, 0);\n    }\n\n    setSideLength(sideLength) {\n        this.sideLength = sideLength;\n    }\n\n    grow() {\n        this.growing = true;\n    }\n\n    shrink() {\n        this.growing = false;\n    }\n\n    setColour(fillColour, outlineColour) {\n        this.fillColour = fillColour;\n        this.outlineColour = outlineColour;\n    }\n\n    update() {\n        this.growthRate = 0.1;\n        if (this.sideLength >= this.maxSideLength) {\n            this.growing = false;\n        }\n\n        if (this.sideLength <= 1) {\n            this.growing = true;\n        }\n\n        if (this.growing) {\n            this.sideLength += this.growthRate;\n            if (this.sideLength > this.maxSideLength) {\n                this.sideLength = this.maxSideLength;\n            }\n        } else {\n            this.sideLength -= this.growthRate;\n            if (this.sideLength < 1) {\n                this.sideLength = 1;\n            }\n        }\n    }\n\n    show() {\n        let pointA = p5.Vector.fromAngle(this.p.radians(-90), this.sideLength);\n        pointA.add(this.x, this.y);\n\n        let pointB = p5.Vector.fromAngle(this.p.radians(-30), this.sideLength);\n        pointB.add(this.x, this.y);\n\n        let pointC = p5.Vector.fromAngle(this.p.radians(30), this.sideLength);\n        pointC.add(this.x, this.y);\n\n        let pointD = p5.Vector.fromAngle(this.p.radians(90), this.sideLength);\n        pointD.add(this.x, this.y);\n\n        let pointE = p5.Vector.fromAngle(this.p.radians(150), this.sideLength);\n        pointE.add(this.x, this.y);\n\n        let pointF = p5.Vector.fromAngle(this.p.radians(210), this.sideLength);\n        pointF.add(this.x, this.y);\n\n        this.p.push();\n\n        this.p.fill(this.fillColour);\n        this.p.strokeWeight(1);\n        this.p.stroke(this.outlineColour);\n\n        this.p.beginShape();\n        this.p.vertex(pointA.x, pointA.y);\n        this.p.vertex(pointB.x, pointB.y);\n        this.p.vertex(pointC.x, pointC.y);\n        this.p.vertex(pointD.x, pointD.y);\n        this.p.vertex(pointE.x, pointE.y);\n        this.p.vertex(pointF.x, pointF.y);\n        this.p.endShape(this.p.CLOSE);\n\n        this.p.pop();\n    }\n}\n","import Hex from \"./Hex\";\n\n/**\n * Creates a tiled hex grid with a hex placed in the center of the screen.\n */\nexport default class HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        this.p = p;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.hexSideLength = hexSideLength;\n\n        const horizontalHexSpacing = p.sin(60) * hexSideLength * 2;\n        const verticleHexSpacing = 2 * hexSideLength * 0.75;\n\n        const midWidth = canvasWidth / 2;\n        const midHeight = canvasHeight / 2;\n\n        const maxHexXPos = midWidth + horizontalHexSpacing / 2;\n        const maxHexYPos = midHeight + verticleHexSpacing / 2;\n\n        this.hexes = this.__createHexes(\n            horizontalHexSpacing,\n            verticleHexSpacing,\n            maxHexXPos,\n            maxHexYPos\n        );\n    }\n\n    __createHexes(\n        horizontalHexSpacing,\n        verticleHexSpacing,\n        maxHexXPos,\n        maxHexYPos\n    ) {\n        let hexes = [];\n        let visited = [];\n        let explore = [];\n\n        explore.push({ x: 0, y: 0 });\n\n        while (explore.length > 0) {\n            let coord = explore.pop();\n\n            // Coordinates are floating points, so checking for equality is difficult\n            // and converting to int leads to rounding issues.\n            // So just check there is not a very close coordinate already visited.\n            const matchesThisCoord = (element) => {\n                let xDiff = Math.abs(element.x - coord.x);\n                let yDiff = Math.abs(element.y - coord.y);\n                return xDiff < 2 && yDiff < 2;\n            };\n\n            if (visited.some(matchesThisCoord)) {\n                continue;\n            }\n\n            if (\n                coord.x > maxHexXPos ||\n                coord.x < -maxHexXPos ||\n                coord.y > maxHexYPos ||\n                coord.y < -maxHexYPos\n            ) {\n                continue;\n            }\n\n            visited.push(coord);\n\n            let surroundingHexes = this.__getSurroundingHexes(\n                coord,\n                horizontalHexSpacing,\n                verticleHexSpacing\n            );\n            explore = explore.concat(surroundingHexes);\n        }\n\n        visited.forEach((coord) => {\n            let h = new Hex(this.p, coord.x, coord.y, this.hexSideLength);\n            hexes.push(h);\n        });\n\n        return hexes;\n    }\n\n    __getSurroundingHexes(coord, horizontalHexSpacing, verticleHexSpacing) {\n        let surroundingHexes = [];\n\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing,\n            y: coord.y,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y + verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x - horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n        surroundingHexes.push({\n            x: coord.x + horizontalHexSpacing / 2,\n            y: coord.y - verticleHexSpacing,\n        });\n\n        return surroundingHexes;\n    }\n\n    update() {\n        this.hexes.forEach((hex) => {\n            hex.update();\n        });\n    }\n\n    show() {\n        this.p.push();\n        this.p.translate(this.canvasWidth / 2, this.canvasHeight / 2);\n\n        this.hexes.forEach((hex) => {\n            hex.show();\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nconst timeBetweenColourChange = (60 / 255) * 1000;\n\nexport default class CenterOutHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.lastHueIncrementTime = Date.now();\n        this.setCenterOutPattern();\n    }\n\n    setCenterOutPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        const maxDistFromCenter = this.p.dist(\n            this.canvasWidth / 2,\n            this.canvasHeight / 2,\n            0,\n            0\n        );\n\n        this.hexes.forEach((hex) => {\n            const hexDistFromCenter = this.p.dist(hex.x, hex.y, 0, 0);\n            const startingSideLength = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                this.hexSideLength,\n                0\n            );\n            hex.setSideLength(startingSideLength);\n            hex.grow();\n\n            const hue = this.p.map(\n                hexDistFromCenter,\n                0,\n                maxDistFromCenter,\n                180,\n                50\n            );\n            const fillColour = this.p.color(0, 150, hue);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n\n    update() {\n        super.update();\n\n        const currentTime = Date.now();\n        if (currentTime - this.lastHueIncrementTime < timeBetweenColourChange) {\n            return;\n        }\n\n        this.lastHueIncrementTime = currentTime;\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const fillColour = this.p.color(\n                this.p.hue(hex.fillColour) + 1,\n                this.p.saturation(hex.fillColour),\n                this.p.lightness(hex.fillColour)\n            );\n            const outlineColour = this.p.color(\n                this.p.hue(hex.outlineColour) + 1,\n                this.p.saturation(hex.outlineColour),\n                this.p.lightness(hex.outlineColour)\n            );\n            hex.setColour(fillColour, outlineColour);\n        });\n\n        this.p.pop();\n    }\n}\n","import HexGrid from \"./HexGrid\";\n\nexport default class RandomHexGrid extends HexGrid {\n    constructor(p, canvasWidth, canvasHeight, hexSideLength) {\n        super(p, canvasWidth, canvasHeight, hexSideLength);\n        this.setRandomPattern();\n    }\n\n    setRandomPattern() {\n        this.p.push();\n        this.p.colorMode(this.p.HSL, 255);\n\n        this.hexes.forEach((hex) => {\n            const maxColourVal = 256;\n            const hue = this.p.random(0, maxColourVal);\n            const sat = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const light = this.p.random(maxColourVal * 0.2, maxColourVal * 0.7);\n            const fillColour = this.p.color(hue, sat, light);\n            const outlineColour = this.p.color(\n                this.p.hue(fillColour),\n                this.p.saturation(fillColour),\n                this.p.lightness(fillColour) / 2\n            );\n            hex.setColour(fillColour, outlineColour);\n\n            const startingSize = this.p.random(0, this.hexSideLength);\n            hex.setSideLength(startingSize);\n\n            const isGrowing = this.p.random([true, false]);\n            if (isGrowing) {\n                hex.grow();\n            } else {\n                hex.shrink();\n            }\n        });\n\n        this.p.pop();\n    }\n\n    __;\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport CenterOutHexGrid from \"./CenterOutHexGrid\";\nimport HexGrid from \"./HexGrid\";\nimport RandomHexGrid from \"./RandomHexGrid\";\nimport \"./Hexes.scss\";\nimport FullscreenElem from \"../../components/fullscreenElem/FullscreenElem\";\n\nclass Hexes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let hexGrid;\n        let currentPattern;\n        let patternRadioGroup;\n\n        const randomPattern = \"Random\";\n        const centerOutPattern = \"CenterOutPattern\";\n\n        const getCanvasHeight = () => {\n            return window.innerHeight;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n\n        const getSideLength = () => {\n            let minDim = Math.min(getCanvasHeight(), getCanvasWidth());\n            return 0.05 * minDim;\n        };\n\n        const createHexGrid = () => {\n            switch (currentPattern) {\n                case randomPattern:\n                    return new RandomHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                case centerOutPattern:\n                    return new CenterOutHexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n                default:\n                    return new HexGrid(\n                        p,\n                        getCanvasWidth(),\n                        getCanvasHeight(),\n                        getSideLength()\n                    );\n            }\n        };\n\n        const createControls = () => {\n            patternRadioGroup = p.createRadio();\n            patternRadioGroup.option(randomPattern);\n            patternRadioGroup.option(centerOutPattern);\n            patternRadioGroup.parent(\"radioOptions\");\n\n            patternRadioGroup.selected(randomPattern);\n\n            currentPattern = patternRadioGroup.selected();\n        };\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            createControls();\n\n            p.angleMode(p.DEGREES);\n            hexGrid = createHexGrid();\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            if (patternRadioGroup.selected() !== currentPattern) {\n                currentPattern = patternRadioGroup.selected();\n                hexGrid = createHexGrid();\n            }\n\n            hexGrid.update();\n            hexGrid.show();\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n            hexGrid = createHexGrid();\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <FullscreenElem id='canvas' />\n                <div id='controls'>\n                    <div id='radioOptions'></div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Hexes;\n"],"sourceRoot":""}