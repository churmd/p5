{"version":3,"sources":["components/fullscreenElem/FullscreenElem.jsx","NotFound.jsx","sketches/bezierCurve/Point.js","sketches/bezierCurve/QuadLerpPoints.js","sketches/bezierCurve/QuadBezierCurve.js","sketches/bezierCurve/QubeLerpPoints.js","sketches/bezierCurve/QubeBezierCurve.js","sketches/bezierCurve/BezierCurve.jsx","constants/Mod.js","sketches/raycastingfps/Player.js","sketches/raycastingfps/World.js","sketches/raycastingfps/PlayerRay.js","sketches/raycastingfps/ProjectionPlane.js","sketches/raycastingfps/RayCastingFps.jsx","App.js","index.js","constants/RoutePaths.js"],"names":["FullscreenElem","toggleCavasFullScreen","canvasElem","document","getElementById","fullscreenElement","exitFullScreen","openFullScreen","elem","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","this","props","onClick","React","Component","Notfound","Point","p5Instance","x","y","r","p","createVector","push","fill","circle","pop","proptypes","p5","number","QuadLerpPoints","a","b","c","lerpPerc","abLerp","Vector","lerp","bcLerp","combinedLerp","instanceOf","QuadBezierCurve","pointA","pointB","pointC","iterations","showLines","showCurveDots","opactity","curve","createCurve","alpha","colorMode","HSL","strokeWeight","forEach","curvePoint","index","hue","length","colour","color","stroke","line","curveIncrements","i","curvePerc","quadLerpPoints","getPos","QubeLerpPoints","lerpPoint","QubeBezierCurve","pointD","curveA","curveB","qubeCurve","showQuadCurves","showDots","curveAPoints","curveBPoints","numQuadPoints","curvePercent","cubePoint","show","BezierCurve","sketch","pA","pB","pC","pD","directionB","directionC","setup","cnv","createCanvas","getCanvasWidth","getCanvasHeight","parent","style","draw","background","noLoop","windowResized","resizeCanvas","window","innerHeight","innerWidth","myRef","createRef","myP5","current","ref","id","mod","n","m","Player","heading","position","walkSpeed","turnSpeed","TWO_PI","dir","fromAngle","mult","add","HALF_PI","amount","blockSize","pixelX","round","pixelY","pixelPos","getPixelXY","translate","rotate","triangle","propTypes","World","player","blocks","floor","playerRays","yOffset","xOffset","rect","playerRay","didCollide","headingVec","angle","vecToCollsion","distance","collsionPointInWorld","playerPosition","noStroke","PlayerRay","playerHeading","distanceWithoutFishEye","cos","bool","ProjectionPlane","width","height","fov","distanceToPlane","tan","angleBetweenRays","collisions","world","rectMode","CENTER","__drawWallInColumn","collision","column","wallHeight","wallBrightness","map","wallColour","wrappedAngle","__distanceToWall","origin","sx","sqrt","sq","sy","mults","__getXYDirectionMultipliers","xMult","yMult","ax","__getXInitOffset","ay","__getYInitOffset","nextXCoord","nextYCoord","nextXDist","nextYDist","distToWall","min","maxRayLen","getWidth","getHeight","isCoordWall","RayCollision","PI","xCoord","yCoord","RayCastingFps","projectionPlane","frameRate","angleMode","RADIANS","radians","handleMovement","findRayCollisions","showProjection","keyIsDown","LEFT_ARROW","turnLeft","RIGHT_ARROW","turnRight","moveForward","moveLeft","moveBackward","moveRight","ModuloTimesTable","lazy","SnowflakeGenerator","FlockingSimulation","LissajousCurveTable","MatrixRain","MaurerRose","MazeGenerator","ChaosGame","Home","BeautifulTrig","Hexes","Cuneiform","routing","fallback","exact","path","routePaths","component","App","StrictMode","rootElement","hasChildNodes","hydrate","render","home","bezierCurve","chaosGame","cuneiformNumberConverter","beautifulTrig","flockingSimulation","hexes","lissajousCurveTable","matrixRain","maurerRose","mazeGenerator","moduloTimesTable","rayCastingFps","snowflakeGenerator"],"mappings":"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","file":"static/js/main.6244eb88.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * A div that when clicked will toggle between fullscreen mode.\n */\nclass FullscreenElem extends React.Component {\n    toggleCavasFullScreen = () => {\n        const canvasElem = document.getElementById(\"canvas\");\n        const currentFullScreenElem = document.fullscreenElement;\n        if (canvasElem === currentFullScreenElem) {\n            this.exitFullScreen(canvasElem);\n        } else {\n            this.openFullScreen(canvasElem);\n        }\n    };\n\n    openFullScreen = (elem) => {\n        if (elem.requestFullscreen) {\n            elem.requestFullscreen();\n        } else if (elem.webkitRequestFullscreen) {\n            /* Safari */\n            elem.webkitRequestFullscreen();\n        } else if (elem.msRequestFullscreen) {\n            /* IE11 */\n            elem.msRequestFullscreen();\n        }\n    };\n\n    exitFullScreen = (elem) => {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            /* Safari */\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n            /* IE11 */\n            document.msExitFullscreen();\n        }\n    };\n\n    render() {\n        return <div {...this.props} onClick={this.toggleCavasFullScreen}></div>;\n    }\n}\n\nexport default FullscreenElem;\n","import React from \"react\";\nconst Notfound = () => <h1>Not found my app</h1>;\nexport default Notfound;\n","import p5 from \"p5\";\nimport { number } from \"prop-types\";\n\nclass Point {\n    constructor(p5Instance, x, y, r) {\n        this.p = p5Instance;\n        this.x = x;\n        this.y = y;\n        this.r = r;\n    }\n\n    getPos() {\n        return this.p.createVector(this.x, this.y);\n    }\n\n    show() {\n        this.p.push();\n\n        this.p.fill(255);\n        this.p.circle(this.x, this.y, this.r);\n\n        this.p.pop();\n    }\n}\n\nPoint.proptypes = {\n    p5Instance: p5,\n    x: number,\n    y: number,\n    r: number,\n};\n\nexport default Point;\n","import p5 from \"p5\";\nimport { instanceOf } from \"prop-types\";\n\nclass QuadLerpPoints {\n    constructor(a, b, c, lerpPerc) {\n        this.abLerp = p5.Vector.lerp(a, b, lerpPerc);\n        this.bcLerp = p5.Vector.lerp(b, c, lerpPerc);\n        this.combinedLerp = p5.Vector.lerp(this.abLerp, this.bcLerp, lerpPerc);\n    }\n}\n\nQuadLerpPoints.proptypes = {\n    a: instanceOf(p5.Vector),\n    b: instanceOf(p5.Vector),\n    c: instanceOf(p5.Vector),\n};\n\nexport default QuadLerpPoints;\n","import p5 from \"p5\";\nimport { instanceOf } from \"prop-types\";\nimport Point from \"./Point\";\nimport QuadLerpPoints from \"./QuadLerpPoints\";\n\nclass QuadBezierCurve {\n    constructor(p5Instance, pointA, pointB, pointC) {\n        this.p = p5Instance;\n        this.pointA = pointA;\n        this.pointB = pointB;\n        this.pointC = pointC;\n        this.iterations = 25;\n    }\n\n    show(showLines = true, showCurveDots = true, opactity = 1) {\n        const curve = this.createCurve();\n\n        if (showCurveDots) this.showCurveDots(curve, opactity);\n        if (showLines) this.showLines(curve, opactity);\n    }\n\n    showLines(curve, opactity) {\n        this.p.push();\n\n        const colourRange = 360;\n        const alpha = colourRange * opactity;\n        this.p.colorMode(this.p.HSL, colourRange);\n        this.p.strokeWeight(2);\n\n        curve.forEach((curvePoint, index) => {\n            const hue = (index / curve.length) * colourRange;\n            const colour = this.p.color(hue, 250, 200, alpha);\n            this.p.stroke(colour);\n\n            this.p.line(\n                curvePoint.abLerp.x,\n                curvePoint.abLerp.y,\n                curvePoint.bcLerp.x,\n                curvePoint.bcLerp.y\n            );\n        });\n\n        this.p.pop();\n    }\n\n    showCurveDots(curve, opactity) {\n        this.p.push();\n\n        this.p.stroke(255, opactity);\n\n        curve.forEach((curvePoint) => {\n            this.p.circle(\n                curvePoint.combinedLerp.x,\n                curvePoint.combinedLerp.y,\n                10\n            );\n        });\n\n        this.p.pop();\n    }\n\n    /***\n     * @returns {[QuadLerpPoints]}\n     */\n    createCurve() {\n        let curve = [];\n\n        const curveIncrements = 1 / this.iterations;\n        for (let i = 0; i <= this.iterations; i++) {\n            const curvePerc = i * curveIncrements;\n            const quadLerpPoints = new QuadLerpPoints(\n                this.pointA.getPos(),\n                this.pointB.getPos(),\n                this.pointC.getPos(),\n                curvePerc\n            );\n            curve[i] = quadLerpPoints;\n        }\n\n        return curve;\n    }\n}\n\nQuadBezierCurve.proptypes = {\n    p5Instance: p5,\n    pointA: instanceOf(Point),\n    pointB: instanceOf(Point),\n    pointC: instanceOf(Point),\n};\n\nexport default QuadBezierCurve;\n","import p5 from \"p5\";\nimport { instanceOf, number } from \"prop-types\";\nimport QuadLerpPoints from \"./QuadLerpPoints\";\n\nclass QubeLerpPoints {\n    constructor(a, b, lerpPerc) {\n        this.a = a;\n        this.b = b;\n        this.lerpPoint = p5.Vector.lerp(\n            a.combinedLerp,\n            b.combinedLerp,\n            lerpPerc\n        );\n    }\n}\n\nQubeLerpPoints.proptypes = {\n    a: instanceOf(QuadLerpPoints),\n    b: instanceOf(QuadLerpPoints),\n    lerpPerc: number,\n};\n\nexport default QubeLerpPoints;\n","import p5 from \"p5\";\nimport { instanceOf } from \"prop-types\";\nimport Point from \"./Point\";\nimport QuadBezierCurve from \"./QuadBezierCurve\";\nimport QubeLerpPoints from \"./QubeLerpPoints\";\n\nclass QubeBezierCurve {\n    constructor(p5Instance, pointA, pointB, pointC, pointD) {\n        this.p = p5Instance;\n        this.pointA = pointA;\n        this.pointB = pointB;\n        this.pointC = pointC;\n        this.pointD = pointD;\n\n        this.curveA = new QuadBezierCurve(p5Instance, pointA, pointB, pointC);\n        this.curveB = new QuadBezierCurve(p5Instance, pointB, pointC, pointD);\n    }\n\n    show() {\n        const qubeCurve = this.createCurve();\n\n        this.showQuadCurves();\n        this.showLines(qubeCurve);\n        this.showDots(qubeCurve);\n    }\n\n    /**\n     * @returns {[QubeLerpPoints]}\n     */\n    createCurve() {\n        const curveAPoints = this.curveA.createCurve();\n        const curveBPoints = this.curveB.createCurve();\n        const numQuadPoints = curveAPoints.length;\n        const curvePercent = 1 / numQuadPoints;\n\n        const qubeCurve = [];\n        for (let i = 0; i < numQuadPoints; i++) {\n            const cubePoint = new QubeLerpPoints(\n                curveAPoints[i],\n                curveBPoints[i],\n                i * curvePercent\n            );\n            qubeCurve[i] = cubePoint;\n        }\n\n        return qubeCurve;\n    }\n\n    showDots(qubeCurve) {\n        this.p.push();\n\n        this.p.stroke(255);\n\n        qubeCurve.forEach((curvePoint) => {\n            this.p.circle(curvePoint.lerpPoint.x, curvePoint.lerpPoint.y, 10);\n        });\n\n        this.p.pop();\n    }\n\n    showLines(qubeCurve) {\n        this.p.push();\n\n        const colourRange = 360;\n        this.p.colorMode(this.p.HSL, colourRange);\n        this.p.strokeWeight(2);\n\n        qubeCurve.forEach((curvePoint, index) => {\n            const hue = (index / qubeCurve.length) * colourRange;\n            const colour = this.p.color(hue, 250, 200);\n            this.p.stroke(colour);\n\n            this.p.line(\n                curvePoint.a.combinedLerp.x,\n                curvePoint.a.combinedLerp.y,\n                curvePoint.b.combinedLerp.x,\n                curvePoint.b.combinedLerp.y\n            );\n        });\n\n        this.p.pop();\n    }\n\n    showQuadCurves() {\n        this.curveA.show(true, false, 0.1);\n        this.curveB.show(true, false, 0.1);\n    }\n}\n\nQubeBezierCurve.proptypes = {\n    p5Instance: p5,\n    pointA: instanceOf(Point),\n    pointB: instanceOf(Point),\n    pointC: instanceOf(Point),\n    pointD: instanceOf(Point),\n};\n\nexport default QubeBezierCurve;\n","import React from \"react\";\nimport p5 from \"p5\";\nimport Point from \"./Point\";\nimport QubeBezierCurve from \"./QubeBezierCurve\";\nimport FullscreenElem from \"../../components/fullscreenElem/FullscreenElem\";\n\nclass BezierCurve extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let pA, pB, pC, pD;\n        let curve;\n        let directionB = 10;\n        let directionC = 10;\n\n        p.setup = () => {\n            const cnv = p.createCanvas(getCanvasWidth(), getCanvasHeight());\n            cnv.parent(\"canvas\");\n            cnv.style(\"display\", \"block\");\n\n            pA = new Point(p, 0, getCanvasHeight() / 2, 50);\n            pB = new Point(p, getCanvasWidth() / 3, getCanvasHeight(), 50);\n            pC = new Point(p, (getCanvasWidth() * 2) / 3, 0, 50);\n            pD = new Point(p, getCanvasWidth(), getCanvasHeight() / 2, 50);\n            curve = new QubeBezierCurve(p, pA, pB, pC, pD);\n        };\n\n        p.draw = () => {\n            p.background(51);\n\n            pA.show();\n            pB.show();\n            pC.show();\n            pD.show();\n\n            curve.show();\n\n            if (pB.y > getCanvasHeight()) {\n                directionB = -10;\n            }\n\n            if (pB.y < 0) {\n                directionB = 10;\n            }\n\n            pB.y += directionB;\n\n            if (pC.y > getCanvasHeight()) {\n                directionC = -10;\n            }\n\n            if (pC.y < 0) {\n                directionC = 10;\n            }\n\n            pC.y += directionC;\n            p.noLoop();\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(getCanvasWidth(), getCanvasHeight());\n        };\n\n        const getCanvasHeight = () => {\n            return window.innerHeight;\n        };\n\n        const getCanvasWidth = () => {\n            return window.innerWidth;\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <FullscreenElem id='canvas' />\n            </div>\n        );\n    }\n}\nexport default BezierCurve;\n","export const mod = (n, m) => {\n    return ((n % m) + m) % m;\n};\n","import p5 from \"p5\";\nimport { number } from \"prop-types\";\nimport { mod } from \"../../constants/Mod\";\n\nclass Player {\n    constructor(p5Instance, x, y, heading) {\n        this.p = p5Instance;\n        this.position = this.p.createVector(x, y);\n        this.heading = heading;\n        this.walkSpeed = 0.05;\n        this.turnSpeed = 0.075;\n    }\n\n    turnRight() {\n        this.heading -= this.turnSpeed;\n        this.heading = mod(this.heading, this.p.TWO_PI);\n    }\n\n    turnLeft() {\n        this.heading += this.turnSpeed;\n        this.heading = mod(this.heading, this.p.TWO_PI);\n    }\n\n    moveForward() {\n        let dir = p5.Vector.fromAngle(-this.heading);\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveBackward() {\n        let dir = p5.Vector.fromAngle(-this.heading);\n        dir.mult(-this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveLeft() {\n        let dir = p5.Vector.fromAngle(-(this.heading + this.p.HALF_PI));\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    moveRight(amount) {\n        let dir = p5.Vector.fromAngle(-(this.heading - this.p.HALF_PI));\n        dir.mult(this.walkSpeed);\n        this.position.add(dir);\n    }\n\n    getPixelXY(blockSize) {\n        const pixelX = this.p.round(this.position.x * blockSize);\n        const pixelY = this.p.round(this.position.y * blockSize);\n        return this.p.createVector(pixelX, pixelY);\n    }\n\n    show(blockSize) {\n        const pixelPos = this.getPixelXY(blockSize);\n\n        this.p.push();\n\n        this.p.stroke(0);\n        this.p.fill(255);\n        this.p.translate(pixelPos.x, pixelPos.y);\n        this.p.rotate(-(this.heading - this.p.HALF_PI));\n\n        this.p.triangle(-10, 10, 0, -10, 10, 10);\n\n        this.p.pop();\n    }\n}\n\nPlayer.propTypes = {\n    p5Instance: p5,\n    x: number,\n    y: number,\n    heading: number,\n};\n\nexport default Player;\n","import p5 from \"p5\";\nimport { instanceOf } from \"prop-types\";\nimport Player from \"./Player\";\n\nclass World {\n    constructor(p5Instance, player) {\n        this.p = p5Instance;\n        this.player = player;\n        this.blockSize = 64;\n        this.blocks = [\n            [1, 1, 1, 1, 1, 1, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 0, 0, 0, 1, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 0, 0, 0, 0, 1],\n            [1, 0, 1, 0, 0, 0, 1],\n            [1, 1, 1, 1, 1, 1, 1],\n        ];\n    }\n\n    getWidth() {\n        return this.blocks[0].length * this.blockSize;\n    }\n\n    getHeight() {\n        return this.blocks.length * this.blockSize;\n    }\n\n    isCoordWall(x, y) {\n        x = this.p.floor(x);\n        y = this.p.floor(y);\n\n        if (\n            x < this.blocks[0].length &&\n            x >= 0 &&\n            y < this.blocks.length &&\n            y >= 0\n        ) {\n            return this.blocks[y][x] === 1;\n        }\n\n        return false;\n    }\n\n    show(playerRays) {\n        this.p.push();\n\n        for (let y = 0; y < this.blocks.length; y++) {\n            for (let x = 0; x < this.blocks[0].length; x++) {\n                const yOffset = y * this.blockSize;\n                const xOffset = x * this.blockSize;\n\n                if (this.blocks[y][x] === 0) {\n                    this.p.fill(150);\n                } else {\n                    this.p.fill(51, 204, 255);\n                }\n\n                this.p.rect(xOffset, yOffset, this.blockSize, this.blockSize);\n            }\n        }\n\n        this.player.show(this.blockSize);\n\n        playerRays.forEach((playerRay) => {\n            if (playerRay.didCollide) {\n                const headingVec = p5.Vector.fromAngle(-playerRay.angle);\n                const vecToCollsion = p5.Vector.mult(\n                    headingVec,\n                    playerRay.distance\n                );\n                const collsionPointInGrid = p5.Vector.add(\n                    playerRay.playerPosition,\n                    vecToCollsion\n                );\n                const collsionPointInWorld = collsionPointInGrid.mult(\n                    this.blockSize\n                );\n\n                this.p.fill(0, 51, 204);\n                this.p.noStroke();\n                this.p.circle(\n                    collsionPointInWorld.x,\n                    collsionPointInWorld.y,\n                    10\n                );\n            }\n        });\n\n        this.p.pop();\n    }\n}\n\nWorld.propTypes = {\n    p5Instance: instanceOf(p5),\n    player: instanceOf(Player),\n};\n\nexport default World;\n","import { cos } from \"mathjs\";\nimport p5 from \"p5\";\nimport { bool, number, instanceOf } from \"prop-types\";\n\nclass PlayerRay {\n    constructor(\n        didCollide = false,\n        playerPosition = null,\n        playerHeading = null,\n        angle = null,\n        distance = null\n    ) {\n        this.didCollide = didCollide;\n        this.playerPosition = playerPosition;\n        this.angle = angle;\n        this.distance = distance;\n        this.distanceWithoutFishEye = distance * cos(playerHeading - angle);\n    }\n}\n\nPlayerRay.propTypes = {\n    didCollide: bool,\n    playerPosition: instanceOf(p5.Vector),\n    playerHeading: instanceOf(p5.Vector),\n    distance: number,\n};\n\nexport default PlayerRay;\n","import p5 from \"p5\";\nimport { number, instanceOf } from \"prop-types\";\nimport { mod } from \"../../constants/Mod\";\nimport Player from \"./Player\";\nimport RayCollision from \"./PlayerRay\";\n\nclass ProjectionPlane {\n    constructor(p5Instance, width, height, fov) {\n        this.p = p5Instance;\n        this.width = width;\n        this.height = height;\n        this.distanceToPlane = width / 2 / this.p.tan(fov / 2);\n        this.fov = fov;\n        this.angleBetweenRays = fov / width;\n    }\n\n    showProjection(collisions, world) {\n        this.p.push();\n        this.p.noStroke();\n\n        // draw sky\n        this.p.fill(204, 255, 255);\n        this.p.rect(0, 0, this.width, this.height / 2);\n\n        // draw floor\n        this.p.fill(150);\n        this.p.rect(0, this.height / 2, this.width, this.height / 2);\n\n        this.p.rectMode(this.p.CENTER);\n        for (let i = 0; i < collisions.length; i++) {\n            this.__drawWallInColumn(collisions[i], world.blockSize, i);\n        }\n\n        this.p.pop();\n    }\n\n    /**\n     *\n     * @param {RayCollision} collision\n     * @param {number} blockSize\n     * @param {number} column\n     */\n    __drawWallInColumn(collision, blockSize, column) {\n        if (collision.didCollide) {\n            this.p.push();\n\n            const distInWorldToWall = this.p.round(\n                collision.distanceWithoutFishEye * blockSize\n            );\n            const wallHeight =\n                (blockSize / distInWorldToWall) * this.distanceToPlane;\n\n            const maxViewDist = 6;\n            const wallBrightness = this.p.map(\n                collision.distanceWithoutFishEye,\n                0,\n                maxViewDist,\n                100,\n                0,\n                true\n            );\n            const wallColour = this.p.color(\n                `hsb(195, 100%, ${wallBrightness}%)`\n            );\n\n            // if there is no stroke the walls look tranparent as they are only 1 pixel wide\n            this.p.stroke(wallColour);\n            this.p.fill(wallColour);\n            this.p.rect(column, this.height / 2, 1, wallHeight);\n\n            this.p.pop();\n        }\n    }\n\n    /**\n     * Finds all the ray colisions from the player.\n     * @param {Player} player The player casting the rays.\n     * @param {World} world The world the rays will be cast into.\n     * @returns {RayCollision[]} The list of ray colisions with walls found.\n     */\n    findRayCollisions(player, world) {\n        let angle = player.heading + this.fov / 2;\n        const collisions = [];\n        for (let i = 0; i < this.width; i++) {\n            const wrappedAngle = mod(angle, this.p.TWO_PI);\n\n            let c = this.__distanceToWall(player, wrappedAngle, world);\n            collisions.push(c);\n\n            angle -= this.angleBetweenRays;\n        }\n\n        return collisions;\n    }\n\n    /**\n     *\n     * @param {Player} player\n     * @param {number} angle\n     * @param {World} world\n     * @returns {RayCollision}\n     */\n    __distanceToWall(player, angle, world) {\n        const origin = player.position;\n\n        // used to calculate length of line along a heading given only 1 coord\n        const headingVec = p5.Vector.fromAngle(angle, 1);\n\n        const sx = this.p.sqrt(1 + this.p.sq(headingVec.y / headingVec.x));\n        const sy = this.p.sqrt(1 + this.p.sq(headingVec.x / headingVec.y));\n\n        // x y directions of travel\n        const mults = this.__getXYDirectionMultipliers(angle);\n        const xMult = mults.x;\n        const yMult = mults.y;\n\n        // Get inital distances to first grid line in x and y\n        const ax = this.__getXInitOffset(origin.x, xMult);\n        const ay = this.__getYInitOffset(origin.y, yMult);\n\n        let nextXCoord = origin.x;\n        let nextYCoord = origin.y;\n\n        let nextXDist = ax * sx;\n        let nextYDist = ay * sy;\n\n        let distToWall = this.p.min(nextXDist, nextYDist);\n\n        const maxRayLen = this.p.sqrt(\n            this.p.sq(world.getWidth()) + this.p.sq(world.getHeight())\n        );\n\n        while (this.p.min(nextXDist, nextYDist) <= maxRayLen) {\n            if (world.isCoordWall(nextXCoord, nextYCoord)) {\n                return new RayCollision(\n                    true,\n                    origin,\n                    player.heading,\n                    angle,\n                    distToWall\n                );\n            }\n\n            if (nextXDist < nextYDist) {\n                nextXCoord += xMult;\n                distToWall = nextXDist;\n                nextXDist += sx;\n            } else {\n                nextYCoord += yMult;\n                distToWall = nextYDist;\n                nextYDist += sy;\n            }\n        }\n\n        return new RayCollision();\n    }\n\n    /**\n     * Multipliers to move along an angle in the correct x y direction.\n     * @param {number} angle\n     * @returns {x: number, y: number} (x,y) direction multipliers\n     */\n    __getXYDirectionMultipliers(angle) {\n        let mults = { x: 1, y: 1 };\n\n        if (angle < this.p.PI) {\n            mults.y = -1;\n        }\n\n        if (angle >= this.p.HALF_PI && angle < this.p.PI + this.p.HALF_PI) {\n            mults.x = -1;\n        }\n\n        return mults;\n    }\n\n    __getXInitOffset(xCoord, xMult) {\n        if (xMult === -1) {\n            return xCoord % 1;\n        } else {\n            return 1 - (xCoord % 1);\n        }\n    }\n\n    __getYInitOffset(yCoord, yMult) {\n        if (yMult === -1) {\n            return yCoord % 1;\n        } else {\n            return 1 - (yCoord % 1);\n        }\n    }\n}\n\nProjectionPlane.propTypes = {\n    p5Instance: instanceOf(p5),\n    width: number,\n    height: number,\n    fov: number,\n};\n\nexport default ProjectionPlane;\n","import React from \"react\";\nimport p5 from \"p5\";\nimport Player from \"./Player\";\nimport World from \"./World\";\nimport ProjectionPlane from \"./ProjectionPlane\";\n\nconst KeyCodeW = 87;\nconst KeyCodeA = 65;\nconst KeyCodeS = 83;\nconst KeyCodeD = 68;\n\n// Note p5 rotate functions go in a clockwise motion,\n// normal rotate function go in counter clockwise\n// so times all angles by -1 when drawing\n\nclass RayCastingFps extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n    }\n\n    sketch = (p) => {\n        let world;\n        let player;\n        let projectionPlane;\n\n        p.setup = () => {\n            p.frameRate(30);\n\n            p.angleMode(p.RADIANS);\n\n            player = new Player(p, 1.5, 1.5, 0);\n            world = new World(p, player);\n            projectionPlane = new ProjectionPlane(\n                p,\n                world.getWidth(),\n                world.getHeight(),\n                p.radians(60)\n            );\n\n            const cnv = p.createCanvas(world.getWidth() * 2, world.getHeight());\n            cnv.style(\"display\", \"block\");\n            cnv.parent(\"canvas\");\n        };\n\n        p.draw = () => {\n            handleMovement(player);\n            const collisions = projectionPlane.findRayCollisions(player, world);\n\n            p.background(0);\n            world.show(collisions);\n\n            p.translate(world.getWidth(), 0);\n            projectionPlane.showProjection(collisions, world);\n        };\n\n        const handleMovement = (player) => {\n            if (p.keyIsDown(p.LEFT_ARROW)) {\n                player.turnLeft();\n            } else if (p.keyIsDown(p.RIGHT_ARROW)) {\n                player.turnRight();\n            }\n\n            if (p.keyIsDown(KeyCodeW)) {\n                player.moveForward();\n            }\n            if (p.keyIsDown(KeyCodeA)) {\n                player.moveLeft();\n            }\n            if (p.keyIsDown(KeyCodeS)) {\n                player.moveBackward();\n            }\n            if (p.keyIsDown(KeyCodeD)) {\n                player.moveRight();\n            }\n        };\n\n        p.windowResized = () => {\n            p.resizeCanvas(window.innerWidth, window.innerHeight);\n        };\n    };\n\n    componentDidMount() {\n        this.myP5 = new p5(this.sketch, this.myRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.myRef}>\n                <div id='canvas' />\n                <p>Controls:</p>\n                <ul>\n                    <li>move with w, a, s, d</li>\n                    <li>turn with left and right arrow keys</li>\n                </ul>\n            </div>\n        );\n    }\n}\nexport default RayCastingFps;\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\nimport * as routePaths from \"./constants/RoutePaths\";\nimport Notfound from \"./NotFound\";\nimport BezierCurve from \"./sketches/bezierCurve/BezierCurve\";\nimport RayCastingFps from \"./sketches/raycastingfps/RayCastingFps\";\n\nconst ModuloTimesTable = lazy(() =>\n    import(\"./sketches/moduloTimesTableCircle/ModuloTimesTable\")\n);\nconst SnowflakeGenerator = lazy(() =>\n    import(\"./sketches/snowfalkeGenerator/SnowflakeGenerator\")\n);\nconst FlockingSimulation = lazy(() =>\n    import(\"./sketches/flockingSimulation/FlockingSimulation\")\n);\nconst LissajousCurveTable = lazy(() =>\n    import(\"./sketches/lissajousCurveTable/LissajousCurveTable\")\n);\nconst MatrixRain = lazy(() => import(\"./sketches/matrixRain/MatrixRain\"));\nconst MaurerRose = lazy(() => import(\"./sketches/maurerRose/MaurerRose\"));\nconst MazeGenerator = lazy(() =>\n    import(\"./sketches/mazeGenerator/MazeGenerator\")\n);\nconst ChaosGame = lazy(() => import(\"./sketches/chaosGame/ChaosGame\"));\nconst Home = lazy(() => import(\"./components/home/Home\"));\nconst BeautifulTrig = lazy(() =>\n    import(\"./sketches/beautifulTrig/BeautifulTrig\")\n);\nconst Hexes = lazy(() => import(\"./sketches/hexes/Hexes\"));\nconst Cuneiform = lazy(() =>\n    import(\"./sketches/cuneiformNumConverter/Cuneiform\")\n);\n\nconst routing = (\n    <Router>\n        <Suspense fallback={<div>Page is Loading...</div>}>\n            <Switch>\n                <Route exact path={routePaths.home} component={Home} />\n                <Route\n                    exact\n                    path={routePaths.bezierCurve}\n                    component={BezierCurve}\n                />\n                <Route\n                    exact\n                    path={routePaths.rayCastingFps}\n                    component={RayCastingFps}\n                />\n                <Route\n                    exact\n                    path={routePaths.cuneiformNumberConverter}\n                    component={Cuneiform}\n                />\n                <Route\n                    exact\n                    path={routePaths.moduloTimesTable}\n                    component={ModuloTimesTable}\n                />\n                <Route\n                    exact\n                    path={routePaths.snowflakeGenerator}\n                    component={SnowflakeGenerator}\n                />\n                <Route\n                    exact\n                    path={routePaths.flockingSimulation}\n                    component={FlockingSimulation}\n                />\n                <Route\n                    exact\n                    path={routePaths.lissajousCurveTable}\n                    component={LissajousCurveTable}\n                />\n                <Route\n                    exact\n                    path={routePaths.matrixRain}\n                    component={MatrixRain}\n                />\n                <Route\n                    exact\n                    path={routePaths.maurerRose}\n                    component={MaurerRose}\n                />\n                <Route\n                    exact\n                    path={routePaths.mazeGenerator}\n                    component={MazeGenerator}\n                />\n                <Route\n                    exact\n                    path={routePaths.chaosGame}\n                    component={ChaosGame}\n                />\n                <Route\n                    exact\n                    path={routePaths.beautifulTrig}\n                    component={BeautifulTrig}\n                />\n                <Route exact path={routePaths.hexes} component={Hexes} />\n                <Route component={Notfound} />\n            </Switch>\n        </Suspense>\n    </Router>\n);\n\nfunction App() {\n    return <React.StrictMode>{routing}</React.StrictMode>;\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { hydrate, render } from \"react-dom\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n\thydrate(<App />, rootElement);\n} else {\n\trender(<App />, rootElement);\n}\n","export const home = \"/\";\nexport const bezierCurve = \"/bezierCurve\";\nexport const chaosGame = \"/chaosGame\";\nexport const cuneiformNumberConverter = \"/cuneiformNumberConverter\";\nexport const beautifulTrig = \"/beautifulTrigonometry\";\nexport const flockingSimulation = \"/flockingSimulation\";\nexport const hexes = \"/hexes\";\nexport const lissajousCurveTable = \"/lissajousCurveTable\";\nexport const matrixRain = \"/matrixRain\";\nexport const maurerRose = \"/maurerRose\";\nexport const mazeGenerator = \"/mazeGenerator\";\nexport const moduloTimesTable = \"/moduloTimesTable\";\nexport const rayCastingFps = \"/RayCastingFps\";\nexport const snowflakeGenerator = \"/snowflakeGenerator\";\n"],"sourceRoot":""}